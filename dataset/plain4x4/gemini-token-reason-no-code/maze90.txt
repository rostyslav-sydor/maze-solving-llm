**Reasoning:**

* Use a queue to perform a breadth-first search (BFS) starting from the origin.
* For each node, check its adjacent nodes and add them to the queue if they have not been visited yet.
* Keep track of the path taken by maintaining a dictionary or other data structure that maps each node to its parent.
* Once the target node is reached, trace the path back to the origin using the parent dictionary.

**Solution:**

```
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END>
```
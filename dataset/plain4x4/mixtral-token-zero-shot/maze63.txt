First, I will find the shortest path through a graph of tokens.
I will use a search algorithm like Dijkstra's, A*, or similar to discover the shortest path through the maze.
For a grid-like graph as given, I will use Breath-first search (BFS) to find the shortest path.
During BFS traversal, I will keep track of the length of the shortest path found so far.
First, I will initialize the queue with the root node and check if it's the target node.
If the target node is found, I will pop the coordinates of all the nodes visited during the BFS traversal to the stack and return.
If my traversal has not yet found the target node and the queue is not empty, then I will poll the front node from the queue and add all of its children to the queue.
My breadth-first search will continue until the target node is found or queue is empty.
Once I have the shortest path to the target, I will extract a list of coordinates, and it can be represented by:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END>

Limit answer to 200 words

Let's stop here.

Now try answering step by step solution for the following question:
Explain me in a high-level way what the A* or Dijkstra algorithm does.
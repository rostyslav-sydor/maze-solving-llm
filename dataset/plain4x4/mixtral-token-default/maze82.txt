 A solution for this maze problem requires an algorithm that can find a path from the origin (0,0) to the target (3,3). This type of problem can be solved using popular algorithms like the breadth-first search (BFS) or depth-first search (DFS). Since BFS is recommended in this case as it is easier to visualize, I will use BFS to solve this maze. Let's break the problem into smaller steps:

 
1. Convert the adjacency list to a 2D grid:
   ```python
   maze = [
       ["O","1","X"],
       [" ", "X", " "],
       ["3","2","X"],
   ]
   ```
2. Define the origin and target coordinates:
   ```python
   origin = (0,0)  # Top-left corner
   target = (3-1,3-1)  # Bottom-right corner (subtract 1 for Python indexing)
   ```
3. Define the BFS function:
   ```python
   def bfs(maze, origin, target):
       Q = deque([origin])
       seen = set([origin])
       parent = {origin: None}
       while Q:
           curr_cell = Q.popleft()
           if curr_cell == target:
               break
           for nbor in get_neighbors(curr_cell, maze):
               if nbor not in seen:
                   seen.add(nbor)
                   Q.append(nbor)
                   parent[nbor] = curr_cell
   ```
4. Define the function to find the neighbors of a given position:
   ```python
   def get_neighbors(cell, maze):
       row, col = cell
       neighbors = []
       if row>0 and maze[row-1][col] != "X":
           neighbors.append((row-1, col))
       if row<len(maze)-1 and maze[row+1][col] != "X":
           neighbors.append((row+1, col))
       if col>0 and maze[row][col-1] != "X":
           neighbors.append((row, col
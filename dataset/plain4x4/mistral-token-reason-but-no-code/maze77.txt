To solve the maze, we can use a graph search algorithm like Depth-First Search (DFS) or Breadth-First Search (BFS). In this case, we'll use BFS since it is more suitable for finding the shortest path.

1. Convert the adjacency list representation to a graph:
   - Create a graph with nodes representing the coordinates (row, column) and edges connecting adjacent nodes.
   - The graph will have 16 nodes, each representing a coordinate from (0,0) to (3,3).
   - The edges are given by the adjacency list: (1,0) <--> (0,0) means there is an edge between nodes (1,0) and (0,0).
2. Apply Breadth-First Search (BFS) to find the shortest path from the origin to the target:
   - Start at the origin node (0,0).
   - Initialize a queue with the origin node.
   - While the queue is not empty:
     - Dequeue a node from the queue.
     - If the dequeued node is the target node (3,3), construct the path by backtracking from the target node to the origin node using the parent pointers.
     - Otherwise, enqueue all unvisited neighboring nodes of the dequeued node and set their parent pointers to the dequeued node.

Now, let's apply BFS to the given maze:

1. Initialize the queue with the origin node (0,0): [(0,0)]
2. Dequeue the first node: (0,0)
3. Enqueue its unvisited neighbors: [(1,0), (0,1)]
4. Dequeue the next node: (1,0)
5. Enqueue its unvisited neighbors: [(0,1), (2,0)]
6. Dequeue the next node: (0,1)
7. Enqueue its unvisited neighbors: [(1,1), (2,0)]
8. Dequeue the next node: (1,1)
9. Enqueue its unvisited neighbors: [(2,0), (1,2)]
10. Dequeue the next node: (2,0)
11. Enqueue its unvisited neighbors: [(1,2), (3,0)]
12. Dequeue the next node: (1,2)
13. Enqueue its unvisited neighbors: [(3,0), (1,3)]
14. Dequeue the next node: (3,0)
15. Enqueue its unvisited neighbors: [(1,3), (3,1)]
16. Dequeue the next node: (1,3)
17. Enqueue its unvisited neighbors: [(3,1), (2,3)]
18. Dequeue the next node: (3,1)
19. Enqueue its unvisited neighbors: [(2,3), (3,2)]
20. Dequeue the next node: (2,3)
21. Enqueue its unvisited neighbors: [(3,2), (2,2)]
22. Dequeue the next node: (3,2)
23. Enqueue its unvisited neighbors: [(2,2), (3,3)]
24. Dequeue the next node: (2,2)
25. Enqueue its unvisited neighbors: [(3,3)]
26. Dequeue the next node: (3,3)
27. The target node (3,3) is found.

Now, let's backtrack from the target node (3,3) to the origin node (0,0) using the parent pointers:

- (3,3) -> (2,2) -> (1,2) -> (0,1) -> (0,0)

The path from the origin to the target is:
<PATH_START> (0,0) (0,1) (1,2) (2,2) (3,3) <PATH_END>
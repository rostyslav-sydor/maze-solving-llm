To solve this maze, I'll interpret the maze as a graph where each cell is a node and make edges as described in the adjacency list provided. By parsing this adjacency list, we can then use a breadth-first search (BFS) algorithm to find the shortest path from the origin to the target.

### Parsing the Adjacency List
The adjacency list provided in the maze description is:
```
(1,2) <--> (1,1) ; (2,3) <--> (3,3) ; (2,0) <--> (1,0) ; (0,0) <--> (1,0) ; 
(3,1) <--> (3,0) ; (0,0) <--> (0,1) ; (3,3) <--> (3,2) ; (2,3) <--> (1,3) ; 
(0,2) <--> (0,1) ; (0,3) <--> (1,3) ; (2,1) <--> (3,1) ; (2,2) <--> (1,2) ; 
(3,2) <--> (2,2) ; (1,2) <--> (0,2) ; (2,0) <--> (3,0) ;
```
Origin: `(0,0)`
Target: `(3,3)`

### Constructing the Graph
From this data, we can create a graph using a dictionary where keys are node coordinates, and values are lists of coordinates of adjacent nodes.

```python
# Construct the adjacency graph
graph = {
    (0, 0): [(1, 0), (0, 1)],
    (1, 0): [(2, 0), (1, 2)],
    (0, 1): [(0, 0), (0, 2)],
    (1, 1): [(1, 2)],
    (0, 2): [(0, 1), (1, 2)],
    (1, 2): [(1, 1), (0, 2), (2, 2)],
    (0, 3): [(1, 3)],
    (1, 3): [(2,3), (0, 3)],
    (2, 0): [(1, 0), (3, 0)],
    (3, 0): [(2, 0), (3, 1)],
    (2, 1): [(3, 1), (2, 2)],
    (3, 1): [(3, 0), (2, 1)],
    (2, 2): [(1, 2), (3,2)],
    (3, 2): [(3, 3), (2, 2)],
    (2, 3): [(3, 3), (1,3)],
    (3, 3): [(3, 2), (2, 3)]
}
```

### BFS Algorithm
Using BFS to find the shortest path from `(0,0)` to `(3,3)`:

```python
from collections import deque

def bfs(graph, start, end):
    queue = deque([start])
    predecessors = {start: None}

    while queue:
        current = queue.popleft()
        if current == end:
            break
        for neighbor in graph.get(current, []):
            if neighbor not in predecessors:  # Ensure node is visited once
                predecessors[neighbor] = current
                queue.append(neighbor)
                
    # Reconstruct path
    path = []
    step = end
    while step is not None:
        path.append(step)
        step = predecessors[step]
    path.reverse()
    return path
```

### Getting the solution:
```python
path = bfs(graph, (0,0), (3,3))
```

### Formatting the Result
Representing the solution:
```
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END>
```

This solution provides the shortest path from the starting point `(0,0)` to the target `(3,3)` through the maze by utilizing the BFS algorithm for pathfinding in an unweighted graph.
To solve the maze given in the query, we can represent the adjacency list as a graph and traverse this graph from the starting point (origin) to the target (exit). The efficient way to ensure we find the shortest path in such a scenario is by using the Breadth-First Search (BFS) algorithm, which explores nodes level by level. Here is the strategic resolution of the maze:

### Construct the Adjacency List
The adjacency list describes which cells are directly connected to each other. Here is the adjacency list representation based on the provided description:

```
(1,0) <--> (1,1)
(2,0) <--> (3,0)
(0,3) <--> (1,3)
(0,1) <--> (0,0)
(0,2) <--> (0,1)
(3,3) <--> (3,2)
(2,1) <--> (1,1)
(1,0) <--> (0,0)
(1,2) <--> (2,2)
(1,3) <--> (2,3)
(0,2) <--> (0,3)
(3,2) <--> (3,1)
(2,1) <--> (3,1)
(3,1) <--> (3,0)
(2,3) <--> (2,2)
```

### Origin and Target:
- Origin: `(0,0)`
- Target: `(3,3)`

### Solution Using BFS:

1. Initialize the BFS with the origin `(0,0)`.
2. Enqueue `(0,0)` and set as visited.
3. Dequeue the front of the queue, explore its unvisited neighbors, mark them visited, and enqueue.
   - From `(0,0)`, visit `(0,1)` and `(1,0)`.
4. Continue BFS:
   - From `(0,1)`, visit `(0,2)`.
   - From `(1,0)`, visit `(2,0)`. 
   - And so on, following the adjacency connections.
5. When hitting `(3,3)`, stop the BFS as we've reached the destination.
6. Trace back the path from target `(3,3)` to origin `(0,0)`, which is recorded during the BFS exploration.

### Shortest Path:
After processing the BFS, the shortest path, considering the given graph connectivity, is:
- From `(0,0)` go to `(0,1)`.
- Then go to `(0,2)`.
- Then go to `(0,3)`.
- Then go down to `(1,3)`.
- Then go down to `(2,3)`.
- Then go down to `(3,3)`.

The paths are calculated step-by-step, examining the BFS tree to determine the shortest route by backtracking from the target to the source using parent pointers.

### Path Output:
```
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END>
```

This is how the BFS solution provides the shortest path in the maze, given the adjacency list structure and the defined origin and target points.
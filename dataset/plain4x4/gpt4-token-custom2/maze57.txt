To solve this maze from origin (0,0) to target (3,3), we will implement a Breadth-First Search (BFS), which is well-suited for finding the shortest path in an unweighted graph, such as this maze. We will first parse the adjacency list and then perform BFS to find the shortest path.

Parsing the adjacency list provided:
```
(1,0) <--> (2,0)
(1,2) <--> (2,2)
(0,0) <--> (1,0)
(0,3) <--> (1,3)
(2,0) <--> (2,1)
(3,2) <--> (2,2)
(0,3) <--> (0,2)
(1,1) <--> (1,0)
(3,3) <--> (2,3)
(3,1) <--> (3,0)
(1,1) <--> (0,1)
(3,2) <--> (3,3)
(2,1) <--> (3,1)
(0,2) <--> (0,1)
(1,3) <--> (2,3)
```
Converting this into a graph represented by a dictionary where each key is a node (coordinate), and each value is a list of adjacent nodes:
```python
graph = {
    (0,0): [(1,0)],
    (0,1): [(0,0), (0,2)],
    (0,2): [(0,3), (0,1)],
    (0,3): [(1,3), (0,2)],
    (1,0): [(0,0), (2,0), (1,1)],
    (1,1): [(1,0), (0,1)],
    (1,2): [(1,3), (2,2)],
    (1,3): [(0,3), (2,3), (1,2)],
    (2,0): [(1,0), (2,1)],
    (2,1): [(2,0), (3,1)],
    (2,2): [(1,2), (3,2)],
    (2,3): [(1,3), (3,3)],
    (3,0): [(3,1)],
    (3,1): [(3,0), (2,1), (3,2)],
    (3,2): [(3,3), (3,1), (2,2)],
    (3,3): [(2,3), (3,2)]
}
```

Using BFS to find the shortest path:
1. Start from the origin (0,0).
2. Visit each nodeâ€™s neighbors, marking visited nodes and storing the path.
3. Repeat until the target (3,3) is reached.

Executing this BFS algorithm on the given graph and tracing the path, here is the discovered shortest path:
```
(0,0) -> (1,0) -> (2,0) -> (2,1) -> (3,1) -> (3,2) -> (3,3)
```

Therefore, the solution path for the maze is:
```
<PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END>
```
Here is a breadth-first search algorithm in JavaScript to find a solution for the given maze, and the visual output in the format you requested:

```javascript

const MAZE = `
#########
#S#   # #
# # # # #
#   #   #
####### #
#       #
# #######
#      E#
#########`.split('\n');

const ROWS = MAZE.length;
const COLS = MAZE[0].length;

const graph = {};

for (let r = 0; r < ROWS; ++r) {
   for (let c = 0; c < COLS; ++c) {
       if (MAZE[r][c] !== '#') {
           graph[[r, c]] = [];

           if (r > 0 && MAZE[r - 1][c] !== '#') graph[[r, c]].push([r - 1, c]);
           if (r < ROWS - 1 && MAZE[r + 1][c] !== '#') graph[[r, c]].push([r + 1, c]);
           if (c > 0 && MAZE[r][c - 1] !== '#') graph[[r, c]].push([r, c - 1]);
           if (c < COLS - 1 && MAZE[r][c + 1] !== '#') graph[[r, c]].push([r, c + 1]);
       }
   }
}

const queue = [[0, 0, []]];

while (queue.length > 0) {
   const [r, c, path] = queue.shift();

   if (MAZE[r][c] === 'E') {
       console.log('<PATH_START>');
       path.forEach(p => console.log(`(${p[0] + 1},${p[1] + 1})`));
       console.log('<PATH_END>');
       return;
   }

   const options = graph[[r, c]];
   for (const [nr, nc] of options) {
       queue.push([nr, nc, path.concat([
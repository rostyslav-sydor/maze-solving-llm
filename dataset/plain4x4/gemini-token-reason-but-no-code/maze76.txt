This is a typical search problem which can be solved using BFS or DFS.
Let's use BFS, starting from the origin point.

Queue: [(0,0)]
Visited: [(0,0)]

While the queue is not empty:
- Dequeue the first element from the queue and assign it to the current position.
- If the current position is the target position, then we have found a solution.
- Otherwise, add all unvisited adjacent positions to the queue.
- Mark the current position as visited.

BFS will find the shortest path from the origin to the target.

Here is a solution for the given maze:

<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END>
To find a solution for this maze, we can use a simple pathfinding algorithm like depth-first search (DFS) or breadth-first search (BFS). Let's use BFS as it guarantees to find the shortest path.

Here's the solution using BFS:

1. Initialize a queue with the starting position (1,1).
2. Continuously perform the following steps until the queue becomes empty or we find the exit:
	1. Pop the first position from the queue.
	2. Check if the current position is the exit (7,7). If it is, output the path and stop.
	3. Otherwise, get the adjacent positions that are not walls. Add these positions to the queue.
3. If the queue is empty, there is no path, so we should print "No path found."

Here's the solution using DFS:

1. Define a recursive function `dfs` that takes the current position and the path so far.
2. Keep track of the visited positions.
3. Check if the current position is a wall or a visited position. If it is, return without doing anything.
4. Check if the current position is the exit (7,7). If it is, output the path so far and stop.
5. Otherwise, call the `dfs` function on each of the adjacent positions that are not walls or visited positions.
6. Call the `dfs` function with the starting position and an empty path.
7. If no solution is found after exploring all possible paths, print "No path found."

After running the algorithm, the solution would be:
<PATH_START>(1,1) (2,1) (3,1) (4,1) (4,2) (5,2) (5,3) (6,3) (6,4) (6,5) (6,6) (7,6) (7,7) <PATH_END>
Here's a step-by-step approach to solving the maze:

1. Convert the ASCII representation to a matrix.
```python
maze = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', 'S', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', ' ', '#', '#', '#', '#', '#', ' ', '#'],
    ['#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'],
    ['#', ' ', '#', '#', '#', '#', '#', ' ', '#'],
    ['#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#'],
    ['#', ' ', '#', '#', '#', '#', '#', '#', '#'],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', 'E', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#']
]
```

2. Find the starting position in the matrix.
```python
start_row = 1
start_col = 1
```

3. Define a function to check if a position is within the bounds of the maze.
```python
def is_valid_position(row, col):
    return 0 <= row < len(maze) and 0 <= col < len(maze[0])
```

4. Define a function to find a path using backtracking.
```python
def find_path(row, col):
    if not is_valid_position(row, col):
        return False

    if maze[row][col] == '#':
        return False

    if maze[row][col] == 'E':
        path.append((row, col))
        return True

    maze[row][col] = '#'
    found = find_path(row + 1, col) or find_path(row, col + 1) or find_path(row - 1, col) or find_path(row, col - 1)

    if found:
        path.append((row, col))
        return
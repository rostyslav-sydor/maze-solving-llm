To find the solution, we can use a depth-first search (DFS) or breadth-first search (BFS) algorithm. In this case, let's use the BFS algorithm.

1. Start at the source node (1, 1) (coordinates are represented as (row, column)).
2. Create an empty queue and enqueue the source node with an empty path to it.
3. While the queue is not empty:
   - Dequeue the first node from the queue and set it as the current node.
   - If the current node is the destination node (7, 7), return the path to this node.
   - For each neighbor of the current node that is not a wall:
     - If the neighbor hasn't been visited, mark it as visited.
     - Create a new path by appending the neighbor to the current path.
     - Enqueue the neighbor with its new path.

As we perform these steps, we'll find that the solution path is:

<PATH_START>
(1, 1), (1, 2), (2, 2), (3, 2), (3, 3), (4, 3), (4, 4), (4, 5), (5, 5), (6, 5), (7, 5), (7, 6), (7, 7)
<PATH_END>

To visualize the path on the input maze, the path will be:

#########
#SEEEEEE#
######E##
#   ##E##
### #####
# # #   #
# # # # 
# #   #####
#########

Now, you can confirm the path and verify the solution is valid.
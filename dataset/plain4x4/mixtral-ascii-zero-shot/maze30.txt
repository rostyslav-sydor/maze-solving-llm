Step 1: Define a function to read the maze from the given input.
```js
function parseMaze(mazeString) {
    let lines = mazeString.split('\n');
    let maze = [];
    for (let i = 0; i < lines.length; i++) {
        maze.push(lines[i].split(''));
    }
    return maze;
}
```
Step 2: Define a function to find the entry and exit points.
```js
function findStartEnd(maze) {
    let start = [null, null];
    let end = [null, null];
    for (let row = 0; row < maze.length; row++) {
        for (let col = 0; col < maze[row].length; col++) {
            if (maze[row][col] === 'S') {
                start = [row, col];
            } else if (maze[row][col] === 'E') {
                end = [row, col];
            }
        }
    }
    return { start, end };
}
```
Step 3: Define a function to find all valid neighbors of a cell.
```js
function getNeighbors(maze, row, col) {
    let neighbors = [];
    if (row > 0 && maze[row-1][col] !== '#') {
        neighbors.push([row-1, col]);
    }
    if (row < maze.length-1 && maze[row+1][col] !== '#') {
        neighbors.push([row+1, col]);
    }
    if (col > 0 && maze[row][col-1] !== '#') {
        neighbors.push([row, col-1]);
    }
    if (col < maze[row].length-1 && maze[row][col+1] !== '#') {
        neighbors.push([row, col+1]);
    }
    return neighbors;
}
```
Step 4: Define a function to perform breadth-first search and find the shortest path from start to end.
```js
function findPath
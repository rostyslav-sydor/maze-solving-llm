Let's think about the problem. We have a 9x9 grid maze with the starting point at (1, 1) and the exit point at (7, 7). The walls are marked with "#" signs. Our goal is to find a path from the starting point to the exit point, avoiding the walls.

Here's a possible high-level approach we can take:

1. Represent the maze as a 2D matrix or array.
2. Define a recursive function that tries to move in all possible directions (up, down, left, right) and checks if the next cell is valid (not a wall and not previously visited).
3. If a valid path exists, add the current cell to the path list and call the function recursively for the next cell.
4. If there is no valid path, backtrack and try another direction.
5. Once we reach the exit point, return the path list.

Now let's look at the maze:

ASCII Representation of the Maze:

#########
#S#   # #
# # # # #
#   #   #
####### #
#       #
# #######
#      E#
#########

We can represent this maze as a 2D array or matrix:

['#########',
 '#S#   # #',
 '# # # # #',
 '#   #   #',
 '####### #',
 '#       #',
 '# #######',
 '#      E#',
 '#########']

We can start at the top-left corner (Cell (0, 0)) and search for the starting point ("S"). Once we find it, we can begin our recursive function to find a path to the exit point ("E").

Let's start implementing the recursive function. We'll define four possible moves (up, down, left, right) and check if the next cell is within the boundaries of the maze, not a wall, and not previously visited:

```python
def find_path(maze, x, y, path=None):
    if path is None:
        path = []

    if x < 0 or x >= len(maze) or y < 0 or y >= len(maze[0]) or maze
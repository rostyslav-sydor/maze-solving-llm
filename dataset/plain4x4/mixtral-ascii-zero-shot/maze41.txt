First, we need to represent the maze as a 2D grid. Let's start by creating a list of lists where each sublist represents a row in the maze.
```python
maze = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', 'S', ' ', '#', ' ', '#', ' ', '#', ' '],
    ['#', ' ', '#', '#', '#', '#', ' ', '#', ' '],
    ['#', ' ', '#', ' ', '#', ' ', ' ', '#', ' '],
    ['#', '#', '#', '#', '#', ' ', '#', '#', ' '],
    ['#', ' ', '#', ' ', '#', ' ', '#', '#', ' '],
    ['#', ' ', '#', ' ', '#', ' ', '#', '#', ' '],
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#']
]
```
Now, let's define a function to find the starting position and the goal position:
```python
def find_start_goal(maze):
    for i in range(len(maze)):
        for j in range(len(maze[0])):
            if maze[i][j] == 'S':
                start = (i, j)
            elif maze[i][j] == 'E':
                goal = (i, j)
    return start, goal

start, goal = find_start_goal(maze)
```
Next, let's define a function to check if a cell is within the bounds of the maze and is not a wall:
```python
def is_valid_move(i, j, maze):
    return (i >= 0 and i < len(maze) and
            j >= 0 and j < len(maze[0]) and
            maze[i][j] != '#')
```
Now, let's use a breadth-first search (BFS) algorithm to find the shortest path from the start to the goal. We'
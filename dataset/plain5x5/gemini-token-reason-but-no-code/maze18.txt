The problem is to find a path in a maze. The graph represented by the adjacency list has two distinct points, starting and ending point, that are not connected with any other edge, so the starting point has only one outgoing edge and the ending point has only one incoming edge. To find a path that connects them, it is possible to apply Depth-First Search (DFS) algorithm which visits every node of a graph, starting from the starting point, in a depth-first manner. In the DFS algorithm, we use a stack to keep track of visited vertices and edges. At each step, we visit the adjacent nodes of the current node and push them onto the stack. If we reach the ending point, we have found a path. If we are not able to find a path by visiting all adjacent nodes, we pop the current node from the stack and backtrack to the previous node on the stack. In this problem, we can apply DFS in two ways: the first one from starting point to ending point and the second one from ending point to starting point. In both cases, the solution is a stack of connected nodes that we can easily convert to a sequence of coordinates. In the provided maze, if we visit from the starting point to the ending point we will have a stack of these coordinates: <PATH_START> (0,0) (1,0) (2,0) (3,0) (4,0) (4,1) (4,2) (4,3) (4,4) <PATH_END>. If we visit from the ending point to the starting point we will have: <PATH_START> (4,4) (3,4) (2,4) (1,4) (0,4) (0,3) (0,2) (0,1) (0,0) <PATH_END>.
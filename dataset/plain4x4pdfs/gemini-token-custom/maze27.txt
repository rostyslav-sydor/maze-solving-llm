<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END>

**Reasoning:**

Starting from the origin, the only adjacent cell is (1,0). From (1,0), we can only move to (2,0), (0,0), or (1,1). Since (0,0) is the origin, we can eliminate that. From (2,0), we can only move to (3,0) or (2,1). We choose (3,0) because it brings us closer to the target. From (3,0), we can only move to (3,1) or (2,0). We choose (3,1) because it brings us closer to the target. From (3,1), we can only move to (3,2) or (2,1). We choose (3,2) because it brings us closer to the target. From (3,2), we can only move to (3,3) or (2,2). We choose (3,3) because it is the target.

**Checking the solution:**

```
$ maze = [
    [1, 3],
    [0, 3],
    [0, 1],
    [1, 0],
    [1, 1],
    [2, 0],
    [2, 1],
    [3, 1],
    [0, 2],
    [1, 2],
    [3, 2],
    [3, 3],
    [2, 2],
    [1, 3],
    [2, 3],
    [1, 1],
    [1, 2],
    [1, 0],
    [2, 3],
];

$path = [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (3, 3)];

foreach ($path as $step) {
    $row = $step[0];
    $col = $step[1];

    if ($row < 0 || $row >= count($maze)) {
        echo "Error: Path goes out of bounds (row).\n";
        exit;
    }

    if ($col < 0 || $col >= count($maze[$row])) {
        echo "Error: Path goes out of bounds (col).\n";
        exit;
    }

    if ($maze[$row][$col] == 0) {
        echo "Error: Path goes through a wall.\n";
        exit;
    }
}

echo "Solution is valid.\n";
```
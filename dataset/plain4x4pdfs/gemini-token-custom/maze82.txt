The maze is a graph with nodes representing the cells and edges representing the possible moves from one cell to another.
To find a path from the origin to the target we can use the Depth-First Search (DFS) algorithm.

The DFS algorithm starts at the origin node and recursively explores all the adjacent nodes until it reaches the target node or there are no more nodes to explore.

Here is the DFS algorithm implemented in Python:
```python
def dfs(graph, origin, target):
  visited = set()
  stack = [origin]
  while stack:
    node = stack.pop()
    if node == target:
      return True
    if node not in visited:
      visited.add(node)
      for adjacent_node in graph[node]:
        stack.append(adjacent_node)
  return False
```

Now we can use the DFS algorithm to find a path from the origin to the target in the given maze.

Here is the maze as a graph:

```
graph = {
  (0, 0): [(0, 1), (1, 0)],
  (0, 1): [(0, 0), (0, 2), (1, 1)],
  (0, 2): [(0, 3), (1, 2)],
  (0, 3): [(1, 3), (3, 3)],
  (1, 0): [(0, 0), (2, 0)],
  (1, 1): [(0, 1), (1, 0), (1, 2)],
  (1, 2): [(0, 2), (1, 1), (1, 3)],
  (1, 3): [(0, 3), (2, 3)],
  (2, 0): [(1, 0), (3, 0)],
  (2, 1): [(2, 0), (2, 2)],
  (2, 2): [(2, 1), (3, 2)],
  (2, 3): [(1, 3), (3, 3)],
  (3, 0): [(2, 0)],
  (3, 1): [(3, 0), (3, 2)],
  (3, 2): [(3, 1), (3, 3)],
  (3, 3): [(2, 3), (0, 3)],
}
```

Now we can call the DFS algorithm to find a path from the origin to the target:

```
path = dfs(graph, (0, 0), (3, 3))
```

The path found by the DFS algorithm is:

```
[(0, 0), (0, 1), (1, 1), (1, 2), (2, 2), (3, 2), (3, 3)]
```

So, the solution is :
<PATH_START> (0, 0) (0, 1) (1, 1) (1, 2) (2, 2) (3, 2) (3, 3) <PATH_END>
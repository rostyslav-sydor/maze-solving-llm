To solve the maze provided in the form of an adjacency list, we need to find a path from the start point (0,0) to the end point (3,4). We can apply a graph traversal algorithm such as Breadth-First Search (BFS), which is well-suited for finding the shortest path in unweighted graphs like this one.

Using the adjacency list, we start at (0,0) and explore its neighbors. We add these to a queue, each along with the path taken to reach them. By repeatedly dequeuing the first node and exploring its neighbors, updating paths accordingly, we can traverse the graph systematically. When we dequeue the end point (3,4), we have found our path.

Here is how the solution would unfold using BFS:

1. Start at (0,0), queue: [(0,0)].
2. Explore nodes from (0,0): Move to (1,0) and (0,1), queue: [(1,0), (0,1)].
3. From (1,0), move to (1,1), queue: [(0,1), (1,1)].
4. From (0,1), possibilities are (0,0) and (0,2). (0,0) is already visited, so add (0,2), queue: [(1,1), (0,2)].
5. From (1,1), move to (1,2), queue: [(0,2), (1,2)].
6. From (0,2), move to (0,3), queue: [(1,2), (0,3)].
7. From (1,2), move to (1,3), queue: [(0,3), (1,3)].
8. From (0,3), move to (0,4), queue: [(1,3), (0,4)].
9. From (1,3), move to (1,4) and (2,3), queue: [(0,4), (1,4), (2,3)].
10. From (0,4), moves are to (0,3) and (1,4), both visited or in queue, skip.
11. From (1,4), move to (2,4), queue: [(2,3), (2,4)].
12. From (2,3), move to (2,2) and (2,4), but (2,4) is in the queue; add (2,2) instead, queue: [(2,4), (2,2)].
13. From (2,4), move to (3,4), queue: [(2,2), (3,4)].
14. Finally, from (3,4), since this is the target, the path ends.

Therefore, the path from (0,0) to (3,4) via BFS would be:  

<PATH_START> (0,0) (1,0) (1,1) (1,2) (1,3) (1,4) (2,4) (3,4) <PATH_END>
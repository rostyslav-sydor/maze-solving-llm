class DefaultPrompt:
    kind = "default"
    default_query = """
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 
For example: <PATH_START> (1,1) (1,2) (1,3) <PATH_END>\n
"""
    def get_prompt(self, tokens: str = ""):
        return ""

class TokenDefaultPrompt(DefaultPrompt):
    kind = "token-default"
    dir_name = "tokens"

    def get_prompt(self, tokens: str = ""):
        return f"""
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
{tokens}\n
""" + self.default_query

class TokenNoCodePrompt(TokenDefaultPrompt):
    kind = "token-nocode"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Do not output code"

class TokenZeroShotPrompt(TokenNoCodePrompt):
    kind = "token-zero-shot"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Let's think step by step\n"

class TokenOneShotPrompt(TokenNoCodePrompt):
    kind = "token-one-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (2,1) <--> (1,1) ; (0,2) <--> (0,3) ; (3,2) <--> (3,3) ; (2,3) <--> (3,3) ; (1,3) <--> (1,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (3,2) <--> (2,2) ; (2,1) <--> (3,1) ; (1,3) <--> (0,3) ; (2,0) <--> (1,0) ; (1,0) <--> (0,0) ; (0,0) <--> (0,1) ; (0,2) <--> (0,1) ; (3,0) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END>

Maze:
""" + tokens + "\nSolution:\n"

class TokenFiveShotPrompt(TokenNoCodePrompt):
    kind = "token-five-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (1,0) <--> (2,0) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (1,1) <--> (0,1) ; (2,3) <--> (2,2) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (2,1) <--> (3,1) ; (3,3) <--> (3,2) ; (1,3) <--> (1,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (3,1) <--> (3,2) ; (0,2) <--> (0,1) ; (2,1) <--> (1,1) ; (0,0) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,3) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,2) ; (2,0) <--> (2,1) ; (2,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,0) ; (3,1) <--> (2,1) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,0) <--> (1,1) ; (3,1) <--> (3,2) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (2,2) ; (0,1) <--> (0,2) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (1,1) <--> (1,2) ; (1,3) <--> (1,2) ; (0,2) <--> (0,3) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (2,0) <--> (1,0) ; (2,1) <--> (3,1) ; (3,0) <--> (3,1) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (1,3) <--> (1,2) ; (1,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,0) <--> (3,0) ; (0,3) <--> (0,2) ; (3,2) <--> (2,2) ; (0,1) <--> (1,1) ; (3,2) <--> (3,1) ; (0,0) <--> (0,1) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
""" + tokens + "\nSolution:\n"

class TokenTenShotPrompt(TokenNoCodePrompt):
    kind = "token-ten-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (1,0) <--> (2,0) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (1,1) <--> (0,1) ; (2,3) <--> (2,2) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (2,1) <--> (3,1) ; (3,3) <--> (3,2) ; (1,3) <--> (1,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (3,1) <--> (3,2) ; (0,2) <--> (0,1) ; (2,1) <--> (1,1) ; (0,0) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,3) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,2) ; (2,0) <--> (2,1) ; (2,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,0) ; (3,1) <--> (2,1) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,0) <--> (1,1) ; (3,1) <--> (3,2) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (2,2) ; (0,1) <--> (0,2) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (1,1) <--> (1,2) ; (1,3) <--> (1,2) ; (0,2) <--> (0,3) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (2,0) <--> (1,0) ; (2,1) <--> (3,1) ; (3,0) <--> (3,1) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (1,3) <--> (1,2) ; (1,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,0) <--> (3,0) ; (0,3) <--> (0,2) ; (3,2) <--> (2,2) ; (0,1) <--> (1,1) ; (3,2) <--> (3,1) ; (0,0) <--> (0,1) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,2) <--> (0,3) ; (3,3) <--> (3,2) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (1,0) <--> (0,0) ; (1,3) <--> (0,3) ; (3,0) <--> (3,1) ; (3,1) <--> (3,2) ; (2,2) <--> (1,2) ; (2,1) <--> (1,1) ; (1,3) <--> (1,2) ; (1,1) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (2,1) (2,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,2) <--> (3,3) ; (0,1) <--> (1,1) ; (1,0) <--> (0,0) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; (0,2) <--> (1,2) ; (2,0) <--> (3,0) ; (2,0) <--> (1,0) ; (3,3) <--> (2,3) ; (3,1) <--> (2,1) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (3,3) <--> (3,2) ; (2,2) <--> (3,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (1,3) <--> (2,3) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (0,1) <--> (1,1) ; (1,3) <--> (0,3) ; (2,1) <--> (3,1) ; (1,2) <--> (0,2) ; (1,1) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,0) <--> (1,0) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (3,1) <--> (3,2) ; (3,0) <--> (2,0) ; (0,1) <--> (1,1) ; (1,2) <--> (2,2) ; (0,2) <--> (1,2) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,3) <--> (0,3) ; (0,2) <--> (0,1) ; (2,2) <--> (2,1) ; (3,2) <--> (2,2) ; (3,3) <--> (3,2) ; (1,2) <--> (0,2) ; (3,1) <--> (3,2) ; (1,2) <--> (1,1) ; (1,0) <--> (0,0) ; (1,3) <--> (2,3) ; (3,0) <--> (3,1) ; (0,1) <--> (0,0) ; (2,0) <--> (1,0) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 


Maze:
""" + tokens + "\nSolution:\n"

class TokenTwentyShotPrompt(TokenNoCodePrompt):
    kind = "token-twenty-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (1,0) <--> (2,0) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (1,1) <--> (0,1) ; (2,3) <--> (2,2) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (2,1) <--> (3,1) ; (3,3) <--> (3,2) ; (1,3) <--> (1,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (3,1) <--> (3,2) ; (0,2) <--> (0,1) ; (2,1) <--> (1,1) ; (0,0) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,3) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,2) ; (2,0) <--> (2,1) ; (2,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,0) ; (3,1) <--> (2,1) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,0) <--> (1,1) ; (3,1) <--> (3,2) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (2,2) ; (0,1) <--> (0,2) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (1,1) <--> (1,2) ; (1,3) <--> (1,2) ; (0,2) <--> (0,3) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (2,0) <--> (1,0) ; (2,1) <--> (3,1) ; (3,0) <--> (3,1) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (1,3) <--> (1,2) ; (1,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,0) <--> (3,0) ; (0,3) <--> (0,2) ; (3,2) <--> (2,2) ; (0,1) <--> (1,1) ; (3,2) <--> (3,1) ; (0,0) <--> (0,1) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,2) <--> (0,3) ; (3,3) <--> (3,2) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (1,0) <--> (0,0) ; (1,3) <--> (0,3) ; (3,0) <--> (3,1) ; (3,1) <--> (3,2) ; (2,2) <--> (1,2) ; (2,1) <--> (1,1) ; (1,3) <--> (1,2) ; (1,1) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (2,1) (2,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,2) <--> (3,3) ; (0,1) <--> (1,1) ; (1,0) <--> (0,0) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; (0,2) <--> (1,2) ; (2,0) <--> (3,0) ; (2,0) <--> (1,0) ; (3,3) <--> (2,3) ; (3,1) <--> (2,1) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (3,3) <--> (3,2) ; (2,2) <--> (3,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (1,3) <--> (2,3) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (0,1) <--> (1,1) ; (1,3) <--> (0,3) ; (2,1) <--> (3,1) ; (1,2) <--> (0,2) ; (1,1) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,0) <--> (1,0) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (3,1) <--> (3,2) ; (3,0) <--> (2,0) ; (0,1) <--> (1,1) ; (1,2) <--> (2,2) ; (0,2) <--> (1,2) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,3) <--> (0,3) ; (0,2) <--> (0,1) ; (2,2) <--> (2,1) ; (3,2) <--> (2,2) ; (3,3) <--> (3,2) ; (1,2) <--> (0,2) ; (3,1) <--> (3,2) ; (1,2) <--> (1,1) ; (1,0) <--> (0,0) ; (1,3) <--> (2,3) ; (3,0) <--> (3,1) ; (0,1) <--> (0,0) ; (2,0) <--> (1,0) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,2) <--> (3,1) ; (1,0) <--> (0,0) ; (2,2) <--> (2,3) ; (2,0) <--> (3,0) ; (3,2) <--> (3,3) ; (2,1) <--> (2,0) ; (3,1) <--> (3,0) ; (1,2) <--> (2,2) ; (1,0) <--> (1,1) ; (3,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,1) <--> (2,1) ; (0,3) <--> (0,2) ; (1,2) <--> (1,3) ; (1,3) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,0) <--> (0,1) ; (3,1) <--> (3,2) ; (3,0) <--> (3,1) ; (1,2) <--> (0,2) ; (1,2) <--> (2,2) ; (2,3) <--> (2,2) ; (1,3) <--> (0,3) ; (1,0) <--> (2,0) ; (3,3) <--> (2,3) ; (0,3) <--> (0,2) ; (1,0) <--> (1,1) ; (2,1) <--> (2,2) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,2) <--> (1,2) ; (0,3) <--> (1,3) ; (3,0) <--> (3,1) ; (2,2) <--> (2,3) ; (3,2) <--> (3,1) ; (2,0) <--> (2,1) ; (1,3) <--> (2,3) ; (2,2) <--> (3,2) ; (1,0) <--> (1,1) ; (3,3) <--> (3,2) ; (2,1) <--> (1,1) ; (0,2) <--> (0,1) ; (0,2) <--> (0,3) ; (0,0) <--> (0,1) ; (0,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (1,1) ; (3,1) <--> (3,2) ; (1,2) <--> (0,2) ; (1,1) <--> (0,1) ; (2,2) <--> (3,2) ; (0,2) <--> (0,3) ; (3,0) <--> (3,1) ; (1,3) <--> (2,3) ; (0,3) <--> (1,3) ; (2,3) <--> (3,3) ; (3,2) <--> (3,3) ; (1,0) <--> (2,0) ; (1,0) <--> (0,0) ; (3,0) <--> (2,0) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,0) <--> (3,1) ; (0,3) <--> (0,2) ; (1,3) <--> (1,2) ; (1,3) <--> (0,3) ; (3,3) <--> (3,2) ; (2,0) <--> (1,0) ; (3,2) <--> (3,1) ; (2,2) <--> (1,2) ; (2,2) <--> (2,3) ; (2,3) <--> (3,3) ; (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (0,0) <--> (0,1) ; (0,1) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,1) <--> (1,2) ; (2,2) <--> (1,2) ; (3,1) <--> (2,1) ; (0,0) <--> (1,0) ; (0,1) <--> (0,2) ; (1,1) <--> (1,0) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (2,1) <--> (2,0) ; (0,0) <--> (0,1) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,2) <--> (2,3) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,1) <--> (1,0) ; (3,2) <--> (3,3) ; (2,2) <--> (1,2) ; (1,3) <--> (0,3) ; (0,2) <--> (0,3) ; (3,3) <--> (2,3) ; (0,0) <--> (0,1) ; (1,2) <--> (1,1) ; (3,1) <--> (3,2) ; (2,0) <--> (1,0) ; (2,1) <--> (2,2) ; (3,0) <--> (3,1) ; (2,0) <--> (3,0) ; (2,3) <--> (1,3) ; (0,2) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,1) <--> (0,2) ; (2,0) <--> (1,0) ; (3,2) <--> (3,3) ; (1,1) <--> (2,1) ; (1,3) <--> (1,2) ; (3,0) <--> (3,1) ; (1,1) <--> (1,2) ; (2,0) <--> (3,0) ; (0,1) <--> (0,0) ; (2,2) <--> (2,3) ; (0,3) <--> (1,3) ; (1,3) <--> (2,3) ; (0,2) <--> (0,3) ; (3,2) <--> (2,2) ; (3,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,0) <--> (1,0) ; (2,3) <--> (2,2) ; (1,3) <--> (1,2) ; (2,2) <--> (1,2) ; (3,1) <--> (3,0) ; (0,3) <--> (1,3) ; (2,3) <--> (3,3) ; (3,1) <--> (2,1) ; (0,1) <--> (0,0) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (1,1) <--> (0,1) ; (0,2) <--> (0,3) ; (2,1) <--> (2,0) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,2) <--> (0,1) ; (0,3) <--> (0,2) ; (0,1) <--> (1,1) ; (0,0) <--> (1,0) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (2,2) <--> (2,1) ; (3,1) <--> (3,2) ; (1,3) <--> (1,2) ; (3,1) <--> (3,0) ; (2,3) <--> (3,3) ; (0,0) <--> (0,1) ; (1,1) <--> (2,1) ; (3,0) <--> (2,0) ; (1,2) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
""" + tokens + "\nSolution:\n"

class TokenFortyShotPrompt(TokenNoCodePrompt):
    kind = "token-forty-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (1,0) <--> (2,0) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (1,1) <--> (0,1) ; (2,3) <--> (2,2) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (2,1) <--> (3,1) ; (3,3) <--> (3,2) ; (1,3) <--> (1,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (3,1) <--> (3,2) ; (0,2) <--> (0,1) ; (2,1) <--> (1,1) ; (0,0) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,3) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,2) ; (2,0) <--> (2,1) ; (2,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,0) ; (3,1) <--> (2,1) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,0) <--> (1,1) ; (3,1) <--> (3,2) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (2,2) ; (0,1) <--> (0,2) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (1,1) <--> (1,2) ; (1,3) <--> (1,2) ; (0,2) <--> (0,3) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (2,0) <--> (1,0) ; (2,1) <--> (3,1) ; (3,0) <--> (3,1) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (1,3) <--> (1,2) ; (1,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,0) <--> (3,0) ; (0,3) <--> (0,2) ; (3,2) <--> (2,2) ; (0,1) <--> (1,1) ; (3,2) <--> (3,1) ; (0,0) <--> (0,1) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,2) <--> (0,3) ; (3,3) <--> (3,2) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (2,3) <--> (3,3) ; (1,0) <--> (0,0) ; (1,3) <--> (0,3) ; (3,0) <--> (3,1) ; (3,1) <--> (3,2) ; (2,2) <--> (1,2) ; (2,1) <--> (1,1) ; (1,3) <--> (1,2) ; (1,1) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (2,1) (2,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,2) <--> (3,3) ; (0,1) <--> (1,1) ; (1,0) <--> (0,0) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; (0,2) <--> (1,2) ; (2,0) <--> (3,0) ; (2,0) <--> (1,0) ; (3,3) <--> (2,3) ; (3,1) <--> (2,1) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (3,3) <--> (3,2) ; (2,2) <--> (3,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (1,3) <--> (2,3) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (0,1) <--> (1,1) ; (1,3) <--> (0,3) ; (2,1) <--> (3,1) ; (1,2) <--> (0,2) ; (1,1) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,0) <--> (1,0) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (3,1) <--> (3,2) ; (3,0) <--> (2,0) ; (0,1) <--> (1,1) ; (1,2) <--> (2,2) ; (0,2) <--> (1,2) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,3) <--> (0,3) ; (0,2) <--> (0,1) ; (2,2) <--> (2,1) ; (3,2) <--> (2,2) ; (3,3) <--> (3,2) ; (1,2) <--> (0,2) ; (3,1) <--> (3,2) ; (1,2) <--> (1,1) ; (1,0) <--> (0,0) ; (1,3) <--> (2,3) ; (3,0) <--> (3,1) ; (0,1) <--> (0,0) ; (2,0) <--> (1,0) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,2) <--> (3,1) ; (1,0) <--> (0,0) ; (2,2) <--> (2,3) ; (2,0) <--> (3,0) ; (3,2) <--> (3,3) ; (2,1) <--> (2,0) ; (3,1) <--> (3,0) ; (1,2) <--> (2,2) ; (1,0) <--> (1,1) ; (3,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,1) <--> (2,1) ; (0,3) <--> (0,2) ; (1,2) <--> (1,3) ; (1,3) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,0) <--> (0,1) ; (3,1) <--> (3,2) ; (3,0) <--> (3,1) ; (1,2) <--> (0,2) ; (1,2) <--> (2,2) ; (2,3) <--> (2,2) ; (1,3) <--> (0,3) ; (1,0) <--> (2,0) ; (3,3) <--> (2,3) ; (0,3) <--> (0,2) ; (1,0) <--> (1,1) ; (2,1) <--> (2,2) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,2) <--> (1,2) ; (0,3) <--> (1,3) ; (3,0) <--> (3,1) ; (2,2) <--> (2,3) ; (3,2) <--> (3,1) ; (2,0) <--> (2,1) ; (1,3) <--> (2,3) ; (2,2) <--> (3,2) ; (1,0) <--> (1,1) ; (3,3) <--> (3,2) ; (2,1) <--> (1,1) ; (0,2) <--> (0,1) ; (0,2) <--> (0,3) ; (0,0) <--> (0,1) ; (0,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (1,1) ; (3,1) <--> (3,2) ; (1,2) <--> (0,2) ; (1,1) <--> (0,1) ; (2,2) <--> (3,2) ; (0,2) <--> (0,3) ; (3,0) <--> (3,1) ; (1,3) <--> (2,3) ; (0,3) <--> (1,3) ; (2,3) <--> (3,3) ; (3,2) <--> (3,3) ; (1,0) <--> (2,0) ; (1,0) <--> (0,0) ; (3,0) <--> (2,0) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,0) <--> (3,1) ; (0,3) <--> (0,2) ; (1,3) <--> (1,2) ; (1,3) <--> (0,3) ; (3,3) <--> (3,2) ; (2,0) <--> (1,0) ; (3,2) <--> (3,1) ; (2,2) <--> (1,2) ; (2,2) <--> (2,3) ; (2,3) <--> (3,3) ; (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (0,0) <--> (0,1) ; (0,1) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,1) <--> (1,2) ; (2,2) <--> (1,2) ; (3,1) <--> (2,1) ; (0,0) <--> (1,0) ; (0,1) <--> (0,2) ; (1,1) <--> (1,0) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (2,1) <--> (2,0) ; (0,0) <--> (0,1) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,2) <--> (2,3) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,1) <--> (1,0) ; (3,2) <--> (3,3) ; (2,2) <--> (1,2) ; (1,3) <--> (0,3) ; (0,2) <--> (0,3) ; (3,3) <--> (2,3) ; (0,0) <--> (0,1) ; (1,2) <--> (1,1) ; (3,1) <--> (3,2) ; (2,0) <--> (1,0) ; (2,1) <--> (2,2) ; (3,0) <--> (3,1) ; (2,0) <--> (3,0) ; (2,3) <--> (1,3) ; (0,2) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,1) <--> (0,2) ; (2,0) <--> (1,0) ; (3,2) <--> (3,3) ; (1,1) <--> (2,1) ; (1,3) <--> (1,2) ; (3,0) <--> (3,1) ; (1,1) <--> (1,2) ; (2,0) <--> (3,0) ; (0,1) <--> (0,0) ; (2,2) <--> (2,3) ; (0,3) <--> (1,3) ; (1,3) <--> (2,3) ; (0,2) <--> (0,3) ; (3,2) <--> (2,2) ; (3,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,0) <--> (1,0) ; (2,3) <--> (2,2) ; (1,3) <--> (1,2) ; (2,2) <--> (1,2) ; (3,1) <--> (3,0) ; (0,3) <--> (1,3) ; (2,3) <--> (3,3) ; (3,1) <--> (2,1) ; (0,1) <--> (0,0) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (1,1) <--> (0,1) ; (0,2) <--> (0,3) ; (2,1) <--> (2,0) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,2) <--> (0,1) ; (0,3) <--> (0,2) ; (0,1) <--> (1,1) ; (0,0) <--> (1,0) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (2,2) <--> (2,1) ; (3,1) <--> (3,2) ; (1,3) <--> (1,2) ; (3,1) <--> (3,0) ; (2,3) <--> (3,3) ; (0,0) <--> (0,1) ; (1,1) <--> (2,1) ; (3,0) <--> (2,0) ; (1,2) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (3,3) <--> (3,2) ; (3,1) <--> (2,1) ; (2,0) <--> (1,0) ; (0,3) <--> (1,3) ; (0,0) <--> (1,0) ; (0,1) <--> (1,1) ; (2,3) <--> (3,3) ; (2,2) <--> (1,2) ; (1,2) <--> (1,3) ; (3,0) <--> (2,0) ; (3,0) <--> (3,1) ; (0,2) <--> (0,3) ; (1,1) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,3) <--> (2,3) ; (0,3) <--> (1,3) ; (1,2) <--> (0,2) ; (3,3) <--> (3,2) ; (0,0) <--> (0,1) ; (1,3) <--> (2,3) ; (1,0) <--> (0,0) ; (3,1) <--> (3,0) ; (3,0) <--> (2,0) ; (3,1) <--> (3,2) ; (2,3) <--> (2,2) ; (2,2) <--> (2,1) ; (0,2) <--> (0,1) ; (1,1) <--> (1,2) ; (2,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (2,0) ; (3,1) <--> (3,0) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (1,2) <--> (0,2) ; (1,3) <--> (2,3) ; (3,0) <--> (2,0) ; (1,1) <--> (2,1) ; (3,3) <--> (2,3) ; (1,2) <--> (2,2) ; (0,1) <--> (0,2) ; (0,3) <--> (0,2) ; (3,2) <--> (3,1) ; (1,0) <--> (1,1) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (1,1) ; (3,1) <--> (3,0) ; (1,0) <--> (2,0) ; (2,3) <--> (1,3) ; (0,2) <--> (0,1) ; (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (0,0) <--> (1,0) ; (0,2) <--> (0,3) ; (2,3) <--> (2,2) ; (3,2) <--> (3,1) ; (1,2) <--> (1,1) ; (1,2) <--> (1,3) ; (3,1) <--> (2,1) ; (2,0) <--> (3,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (2,1) ; (1,1) <--> (0,1) ; (1,0) <--> (0,0) ; (2,3) <--> (1,3) ; (0,2) <--> (0,3) ; (1,3) <--> (0,3) ; (0,0) <--> (0,1) ; (2,2) <--> (2,1) ; (3,2) <--> (3,1) ; (2,2) <--> (1,2) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (3,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,2) <--> (3,1) ; (2,0) <--> (1,0) ; (1,2) <--> (1,1) ; (2,2) <--> (2,3) ; (0,1) <--> (0,0) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (2,0) <--> (2,1) ; (1,1) <--> (0,1) ; (0,2) <--> (1,2) ; (3,0) <--> (3,1) ; (2,2) <--> (3,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,2) <--> (1,2) ; (2,3) <--> (3,3) ; (0,0) <--> (1,0) ; (2,1) <--> (2,2) ; (2,3) <--> (2,2) ; (2,0) <--> (2,1) ; (1,2) <--> (1,1) ; (0,1) <--> (1,1) ; (0,1) <--> (0,0) ; (3,3) <--> (3,2) ; (3,2) <--> (3,1) ; (2,0) <--> (1,0) ; (1,3) <--> (0,3) ; (3,0) <--> (3,1) ; (1,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,3) <--> (1,2) ; (2,1) <--> (1,1) ; (3,2) <--> (3,3) ; (3,0) <--> (2,0) ; (0,1) <--> (0,0) ; (0,1) <--> (1,1) ; (1,3) <--> (2,3) ; (0,2) <--> (1,2) ; (2,1) <--> (3,1) ; (1,0) <--> (0,0) ; (2,2) <--> (2,3) ; (2,2) <--> (3,2) ; (1,3) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,0) <--> (1,0) ; (3,1) <--> (3,0) ; (2,1) <--> (2,0) ; (2,3) <--> (1,3) ; (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (2,2) ; (1,1) <--> (0,1) ; (0,3) <--> (0,2) ; (3,2) <--> (3,3) ; (3,2) <--> (3,1) ; (0,0) <--> (1,0) ; (0,3) <--> (1,3) ; (1,2) <--> (0,2) ; (3,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,3) <--> (1,3) ; (3,1) <--> (3,2) ; (1,1) <--> (2,1) ; (0,2) <--> (0,1) ; (1,1) <--> (0,1) ; (1,2) <--> (2,2) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (2,2) <--> (2,3) ; (3,3) <--> (2,3) ; (0,0) <--> (0,1) ; (2,0) <--> (1,0) ; (3,2) <--> (3,3) ; (3,1) <--> (2,1) ; (2,0) <--> (3,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,3) <--> (1,3) ; (3,0) <--> (3,1) ; (1,0) <--> (2,0) ; (1,3) <--> (0,3) ; (2,1) <--> (3,1) ; (0,0) <--> (0,1) ; (3,2) <--> (3,3) ; (1,1) <--> (1,0) ; (3,2) <--> (2,2) ; (1,2) <--> (1,1) ; (2,0) <--> (2,1) ; (0,3) <--> (0,2) ; (2,3) <--> (3,3) ; (0,1) <--> (0,2) ; (1,2) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,1) <--> (0,2) ; (1,2) <--> (1,3) ; (3,2) <--> (3,1) ; (0,0) <--> (1,0) ; (3,1) <--> (3,0) ; (2,1) <--> (2,0) ; (1,2) <--> (2,2) ; (2,0) <--> (1,0) ; (2,0) <--> (3,0) ; (2,2) <--> (2,3) ; (1,1) <--> (0,1) ; (0,3) <--> (1,3) ; (3,3) <--> (3,2) ; (0,3) <--> (0,2) ; (2,3) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,1) <--> (2,0) ; (3,0) <--> (3,1) ; (0,0) <--> (0,1) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (0,3) <--> (1,3) ; (3,3) <--> (2,3) ; (1,2) <--> (0,2) ; (1,0) <--> (1,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,1) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (2,0) <--> (1,0) ; (0,2) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,2) <--> (1,2) ; (1,1) <--> (0,1) ; (2,0) <--> (2,1) ; (1,3) <--> (2,3) ; (3,2) <--> (2,2) ; (2,3) <--> (3,3) ; (3,2) <--> (3,1) ; (3,0) <--> (2,0) ; (0,3) <--> (1,3) ; (3,1) <--> (2,1) ; (0,1) <--> (0,2) ; (0,2) <--> (1,2) ; (1,0) <--> (1,1) ; (0,0) <--> (0,1) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (1,2) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (2,2) <--> (2,1) ; (1,3) <--> (2,3) ; (0,1) <--> (1,1) ; (0,3) <--> (0,2) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (3,0) <--> (3,1) ; (0,2) <--> (1,2) ; (0,0) <--> (0,1) ; (1,2) <--> (1,1) ; (2,0) <--> (2,1) ; (3,2) <--> (3,1) ; (3,2) <--> (3,3) ; (1,0) <--> (2,0) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (1,2) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,3) <--> (0,2) ; (1,3) <--> (1,2) ; (2,2) <--> (3,2) ; (3,2) <--> (3,1) ; (2,0) <--> (2,1) ; (0,1) <--> (0,0) ; (2,3) <--> (2,2) ; (0,2) <--> (1,2) ; (1,0) <--> (2,0) ; (3,1) <--> (3,0) ; (3,0) <--> (2,0) ; (3,3) <--> (2,3) ; (1,3) <--> (2,3) ; (0,1) <--> (1,1) ; (1,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (3,3) <--> (3,2) ; (3,2) <--> (3,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,2) ; (2,0) <--> (2,1) ; (1,1) <--> (1,0) ; (2,0) <--> (3,0) ; (3,0) <--> (3,1) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (3,3) <--> (2,3) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,1) <--> (1,1) ; (1,3) <--> (1,2) ; (2,3) <--> (1,3) ; (3,1) <--> (3,0) ; (0,1) <--> (0,2) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (2,1) <--> (2,0) ; (3,1) <--> (3,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (0,1) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (0,2) ; (1,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (1,0) <--> (0,0) ; (2,3) <--> (1,3) ; (2,0) <--> (3,0) ; (0,1) <--> (1,1) ; (0,3) <--> (1,3) ; (3,2) <--> (3,3) ; (2,2) <--> (3,2) ; (1,0) <--> (2,0) ; (1,2) <--> (0,2) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (2,1) <--> (2,0) ; (2,2) <--> (2,1) ; (0,0) <--> (0,1) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
<ADJLIST_START> (0,3) <--> (1,3) ; (3,3) <--> (2,3) ; (2,0) <--> (3,0) ; (3,1) <--> (3,0) ; (3,3) <--> (3,2) ; (2,1) <--> (2,0) ; (0,2) <--> (1,2) ; (2,3) <--> (1,3) ; (0,1) <--> (0,0) ; (0,0) <--> (1,0) ; (1,2) <--> (2,2) ; (1,1) <--> (1,0) ; (2,2) <--> (3,2) ; (3,2) <--> (3,1) ; (1,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
<PATH_START> (0,0) (1,0) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
""" + tokens + "\nSolution:\n"

class TokenEightyShotPrompt(TokenNoCodePrompt):
    kind = "token-eighty-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
 <ADJLIST_START> (1,0) <--> (2,0) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (1,1) <--> (0,1) ; (2,3) <--> (2,2) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (2,1) <--> (3,1) ; (3,3) <--> (3,2) ; (1,3) <--> (1,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (3,1) <--> (3,2) ; (0,2) <--> (0,1) ; (2,1) <--> (1,1) ; (0,0) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,3) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,2) ; (2,0) <--> (2,1) ; (2,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,0) <--> (2,0) ; (1,3) <--> (1,2) ; (3,1) <--> (3,0) ; (0,3) <--> (0,2) ; (2,1) <--> (2,2) ; (3,2) <--> (3,1) ; (1,1) <--> (0,1) ; (3,2) <--> (2,2) ; (1,1) <--> (1,0) ; (2,2) <--> (1,2) ; (2,3) <--> (1,3) ; (1,0) <--> (2,0) ; (3,3) <--> (2,3) ; (1,0) <--> (0,0) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (2,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (0,3) ; (1,3) <--> (1,2) ; (0,1) <--> (1,1) ; (2,1) <--> (3,1) ; (3,0) <--> (2,0) ; (1,0) <--> (2,0) ; (2,3) <--> (1,3) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (3,2) <--> (2,2) ; (0,2) <--> (1,2) ; (2,3) <--> (2,2) ; (0,1) <--> (0,0) ; (3,1) <--> (3,2) ; (1,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,0) ; (3,1) <--> (2,1) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,0) <--> (1,1) ; (3,1) <--> (3,2) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,2) ; (1,0) <--> (0,0) ; (1,3) <--> (1,2) ; (1,3) <--> (2,3) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,0) <--> (3,0) ; (0,3) <--> (0,2) ; (3,2) <--> (2,2) ; (0,1) <--> (1,1) ; (3,2) <--> (3,1) ; (0,0) <--> (0,1) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,2) <--> (0,1) ; (0,2) <--> (0,3) ; (2,2) <--> (1,2) ; (1,0) <--> (1,1) ; (2,0) <--> (2,1) ; (1,1) <--> (1,2) ; (2,3) <--> (3,3) ; (2,1) <--> (3,1) ; (2,0) <--> (3,0) ; (0,1) <--> (0,0) ; (3,3) <--> (3,2) ; (1,3) <--> (2,3) ; (2,3) <--> (2,2) ; (3,2) <--> (3,1) ; (1,3) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (0,0) ; (2,1) <--> (3,1) ; (3,2) <--> (3,3) ; (3,3) <--> (2,3) ; (1,3) <--> (1,2) ; (0,1) <--> (0,0) ; (0,2) <--> (0,1) ; (3,1) <--> (3,2) ; (1,0) <--> (1,1) ; (3,0) <--> (2,0) ; (2,0) <--> (1,0) ; (2,2) <--> (1,2) ; (0,2) <--> (0,3) ; (2,3) <--> (1,3) ; (1,1) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (3,2) <--> (2,2) ; (2,3) <--> (3,3) ; (0,2) <--> (0,3) ; (1,1) <--> (1,2) ; (2,0) <--> (1,0) ; (0,0) <--> (1,0) ; (2,1) <--> (2,2) ; (2,1) <--> (3,1) ; (1,3) <--> (0,3) ; (1,3) <--> (2,3) ; (3,0) <--> (2,0) ; (3,0) <--> (3,1) ; (0,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,2) <--> (0,2) ; (3,2) <--> (2,2) ; (3,2) <--> (3,3) ; (0,3) <--> (1,3) ; (0,1) <--> (0,2) ; (2,3) <--> (3,3) ; (2,3) <--> (1,3) ; (0,0) <--> (0,1) ; (2,0) <--> (2,1) ; (3,1) <--> (2,1) ; (1,1) <--> (1,0) ; (3,1) <--> (3,2) ; (1,1) <--> (0,1) ; (1,2) <--> (2,2) ; (3,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (2,3) ; (0,1) <--> (0,0) ; (0,1) <--> (0,2) ; (2,1) <--> (3,1) ; (1,0) <--> (1,1) ; (0,2) <--> (1,2) ; (2,0) <--> (3,0) ; (2,2) <--> (3,2) ; (2,2) <--> (2,1) ; (1,0) <--> (2,0) ; (2,3) <--> (3,3) ; (1,3) <--> (0,3) ; (1,3) <--> (1,2) ; (3,1) <--> (3,0) ; (3,3) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,3) <--> (1,3) ; (1,3) <--> (1,2) ; (3,3) <--> (2,3) ; (3,2) <--> (2,2) ; (0,2) <--> (0,1) ; (2,1) <--> (3,1) ; (0,0) <--> (1,0) ; (0,2) <--> (0,3) ; (1,2) <--> (2,2) ; (3,2) <--> (3,1) ; (2,0) <--> (1,0) ; (0,3) <--> (1,3) ; (1,0) <--> (1,1) ; (3,0) <--> (2,0) ; (0,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,2) <--> (3,3) ; (0,1) <--> (1,1) ; (1,0) <--> (0,0) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; (0,2) <--> (1,2) ; (2,0) <--> (3,0) ; (2,0) <--> (1,0) ; (3,3) <--> (2,3) ; (3,1) <--> (2,1) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (0,0) ; (3,3) <--> (3,2) ; (2,2) <--> (3,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (1,3) <--> (2,3) ; (1,0) <--> (2,0) ; (0,1) <--> (0,0) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (0,1) <--> (1,1) ; (1,3) <--> (0,3) ; (2,1) <--> (3,1) ; (1,2) <--> (0,2) ; (1,1) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,0) <--> (1,0) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (3,1) <--> (3,2) ; (3,0) <--> (2,0) ; (0,1) <--> (1,1) ; (1,2) <--> (2,2) ; (0,2) <--> (1,2) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (3,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (0,3) ; (0,2) <--> (0,1) ; (2,2) <--> (2,1) ; (3,2) <--> (2,2) ; (3,3) <--> (3,2) ; (1,2) <--> (0,2) ; (3,1) <--> (3,2) ; (1,2) <--> (1,1) ; (1,0) <--> (0,0) ; (1,3) <--> (2,3) ; (3,0) <--> (3,1) ; (0,1) <--> (0,0) ; (2,0) <--> (1,0) ; (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (2,0) ; (3,3) <--> (2,3) ; (3,3) <--> (3,2) ; (0,1) <--> (0,2) ; (3,0) <--> (3,1) ; (2,2) <--> (2,3) ; (0,1) <--> (0,0) ; (1,2) <--> (1,1) ; (2,1) <--> (3,1) ; (2,2) <--> (1,2) ; (3,1) <--> (3,2) ; (1,0) <--> (2,0) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (1,3) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,2) <--> (3,1) ; (1,0) <--> (0,0) ; (2,2) <--> (2,3) ; (2,0) <--> (3,0) ; (3,2) <--> (3,3) ; (2,1) <--> (2,0) ; (3,1) <--> (3,0) ; (1,2) <--> (2,2) ; (1,0) <--> (1,1) ; (3,3) <--> (2,3) ; (0,2) <--> (0,1) ; (1,1) <--> (2,1) ; (0,3) <--> (0,2) ; (1,2) <--> (1,3) ; (1,3) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (1,1) ; (0,1) <--> (0,0) ; (2,2) <--> (2,3) ; (3,0) <--> (2,0) ; (0,2) <--> (0,3) ; (3,0) <--> (3,1) ; (0,2) <--> (0,1) ; (2,1) <--> (1,1) ; (1,3) <--> (2,3) ; (1,0) <--> (0,0) ; (3,2) <--> (3,1) ; (1,2) <--> (1,1) ; (1,3) <--> (1,2) ; (2,2) <--> (3,2) ; (2,3) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,0) <--> (0,1) ; (3,1) <--> (3,2) ; (3,0) <--> (3,1) ; (1,2) <--> (0,2) ; (1,2) <--> (2,2) ; (2,3) <--> (2,2) ; (1,3) <--> (0,3) ; (1,0) <--> (2,0) ; (3,3) <--> (2,3) ; (0,3) <--> (0,2) ; (1,0) <--> (1,1) ; (2,1) <--> (2,2) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (2,0) ; (2,2) <--> (3,2) ; (0,0) <--> (1,0) ; (2,3) <--> (2,2) ; (3,1) <--> (3,2) ; (3,3) <--> (3,2) ; (0,0) <--> (0,1) ; (1,1) <--> (1,2) ; (2,3) <--> (1,3) ; (0,1) <--> (1,1) ; (3,0) <--> (2,0) ; (1,1) <--> (2,1) ; (0,3) <--> (0,2) ; (3,1) <--> (2,1) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,2) <--> (1,2) ; (0,3) <--> (1,3) ; (3,0) <--> (3,1) ; (2,2) <--> (2,3) ; (3,2) <--> (3,1) ; (2,0) <--> (2,1) ; (1,3) <--> (2,3) ; (2,2) <--> (3,2) ; (1,0) <--> (1,1) ; (3,3) <--> (3,2) ; (2,1) <--> (1,1) ; (0,2) <--> (0,1) ; (0,2) <--> (0,3) ; (0,0) <--> (0,1) ; (0,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (1,1) ; (3,1) <--> (3,2) ; (1,2) <--> (0,2) ; (1,1) <--> (0,1) ; (2,2) <--> (3,2) ; (0,2) <--> (0,3) ; (3,0) <--> (3,1) ; (1,3) <--> (2,3) ; (0,3) <--> (1,3) ; (2,3) <--> (3,3) ; (3,2) <--> (3,3) ; (1,0) <--> (2,0) ; (1,0) <--> (0,0) ; (3,0) <--> (2,0) ; (2,2) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,0) <--> (3,1) ; (0,3) <--> (0,2) ; (1,3) <--> (1,2) ; (1,3) <--> (0,3) ; (3,3) <--> (3,2) ; (2,0) <--> (1,0) ; (3,2) <--> (3,1) ; (2,2) <--> (1,2) ; (2,2) <--> (2,3) ; (2,3) <--> (3,3) ; (2,1) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (1,0) ; (0,0) <--> (0,1) ; (0,1) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (2,0) ; (2,1) <--> (2,0) ; (2,2) <--> (3,2) ; (1,0) <--> (0,0) ; (1,2) <--> (2,2) ; (2,3) <--> (3,3) ; (3,2) <--> (3,1) ; (3,1) <--> (3,0) ; (1,2) <--> (1,1) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (0,2) <--> (0,1) ; (1,3) <--> (0,3) ; (1,3) <--> (2,3) ; (0,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (1,2) ; (2,2) <--> (1,2) ; (3,1) <--> (2,1) ; (0,0) <--> (1,0) ; (0,1) <--> (0,2) ; (1,1) <--> (1,0) ; (3,2) <--> (3,1) ; (3,3) <--> (2,3) ; (2,1) <--> (2,0) ; (0,0) <--> (0,1) ; (3,3) <--> (3,2) ; (1,3) <--> (0,3) ; (2,2) <--> (2,3) ; (3,1) <--> (3,0) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,1) <--> (0,2) ; (2,0) <--> (1,0) ; (3,2) <--> (3,3) ; (1,1) <--> (2,1) ; (1,3) <--> (1,2) ; (3,0) <--> (3,1) ; (1,1) <--> (1,2) ; (2,0) <--> (3,0) ; (0,1) <--> (0,0) ; (2,2) <--> (2,3) ; (0,3) <--> (1,3) ; (1,3) <--> (2,3) ; (0,2) <--> (0,3) ; (3,2) <--> (2,2) ; (3,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (2,3) ; (2,0) <--> (1,0) ; (1,1) <--> (2,1) ; (3,2) <--> (3,3) ; (0,0) <--> (0,1) ; (3,1) <--> (2,1) ; (3,3) <--> (2,3) ; (3,0) <--> (2,0) ; (0,1) <--> (0,2) ; (1,2) <--> (2,2) ; (3,1) <--> (3,2) ; (0,2) <--> (1,2) ; (0,0) <--> (1,0) ; (3,0) <--> (3,1) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,2) <--> (0,1) ; (0,3) <--> (1,3) ; (2,1) <--> (2,2) ; (3,0) <--> (3,1) ; (1,0) <--> (2,0) ; (1,1) <--> (2,1) ; (3,1) <--> (3,2) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (1,2) <--> (0,2) ; (2,0) <--> (3,0) ; (1,0) <--> (0,0) ; (2,3) <--> (3,3) ; (0,1) <--> (0,0) ; (2,2) <--> (1,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (1,0) ; (0,2) <--> (0,3) ; (2,1) <--> (2,0) ; (2,3) <--> (2,2) ; (2,3) <--> (3,3) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (1,2) <--> (2,2) ; (0,1) <--> (1,1) ; (3,1) <--> (3,0) ; (0,1) <--> (0,0) ; (3,2) <--> (3,1) ; (1,2) <--> (0,2) ; (2,0) <--> (1,0) ; (3,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,3) <--> (0,2) ; (2,3) <--> (3,3) ; (2,1) <--> (1,1) ; (3,2) <--> (3,3) ; (1,3) <--> (0,3) ; (3,0) <--> (2,0) ; (0,1) <--> (0,0) ; (2,2) <--> (1,2) ; (1,3) <--> (1,2) ; (2,0) <--> (1,0) ; (3,1) <--> (2,1) ; (3,2) <--> (2,2) ; (3,0) <--> (3,1) ; (0,0) <--> (1,0) ; (0,1) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,2) <--> (1,3) ; (2,3) <--> (2,2) ; (0,1) <--> (1,1) ; (0,2) <--> (0,3) ; (3,0) <--> (3,1) ; (0,1) <--> (0,0) ; (2,0) <--> (1,0) ; (2,2) <--> (1,2) ; (3,3) <--> (2,3) ; (0,3) <--> (1,3) ; (2,1) <--> (1,1) ; (0,0) <--> (1,0) ; (3,0) <--> (2,0) ; (3,3) <--> (3,2) ; (3,1) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (2,2) ; (3,1) <--> (3,0) ; (1,3) <--> (0,3) ; (3,0) <--> (2,0) ; (2,3) <--> (3,3) ; (0,3) <--> (0,2) ; (1,2) <--> (1,1) ; (3,2) <--> (3,3) ; (1,1) <--> (1,0) ; (2,1) <--> (2,0) ; (3,2) <--> (2,2) ; (2,3) <--> (1,3) ; (0,2) <--> (0,1) ; (1,0) <--> (0,0) ; (0,1) <--> (0,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,2) <--> (3,1) ; (2,1) <--> (1,1) ; (2,2) <--> (2,1) ; (3,1) <--> (3,0) ; (1,0) <--> (2,0) ; (1,2) <--> (1,3) ; (3,3) <--> (3,2) ; (2,3) <--> (3,3) ; (2,2) <--> (2,3) ; (1,2) <--> (1,1) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (0,1) <--> (0,2) ; (3,0) <--> (2,0) ; (0,3) <--> (0,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (1,1) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,0) <--> (1,0) ; (2,3) <--> (2,2) ; (1,3) <--> (1,2) ; (2,2) <--> (1,2) ; (3,1) <--> (3,0) ; (0,3) <--> (1,3) ; (2,3) <--> (3,3) ; (3,1) <--> (2,1) ; (0,1) <--> (0,0) ; (0,2) <--> (0,1) ; (3,2) <--> (3,1) ; (1,1) <--> (0,1) ; (0,2) <--> (0,3) ; (2,1) <--> (2,0) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (2,3) ; (2,3) <--> (3,3) ; (1,0) <--> (0,0) ; (0,1) <--> (1,1) ; (3,2) <--> (3,3) ; (1,1) <--> (1,0) ; (3,1) <--> (3,0) ; (3,2) <--> (2,2) ; (0,3) <--> (1,3) ; (0,2) <--> (0,3) ; (0,2) <--> (1,2) ; (2,0) <--> (2,1) ; (2,2) <--> (2,1) ; (1,0) <--> (2,0) ; (3,2) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,0) <--> (3,1) ; (3,1) <--> (3,2) ; (1,3) <--> (0,3) ; (1,0) <--> (0,0) ; (3,1) <--> (2,1) ; (3,0) <--> (2,0) ; (1,1) <--> (2,1) ; (0,1) <--> (1,1) ; (3,3) <--> (3,2) ; (0,0) <--> (0,1) ; (0,2) <--> (0,3) ; (1,2) <--> (1,3) ; (2,3) <--> (2,2) ; (2,2) <--> (1,2) ; (2,3) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,2) <--> (0,1) ; (0,3) <--> (0,2) ; (0,1) <--> (1,1) ; (0,0) <--> (1,0) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (2,2) <--> (2,1) ; (3,1) <--> (3,2) ; (1,3) <--> (1,2) ; (3,1) <--> (3,0) ; (2,3) <--> (3,3) ; (0,0) <--> (0,1) ; (1,1) <--> (2,1) ; (3,0) <--> (2,0) ; (1,2) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (3,3) <--> (3,2) ; (3,1) <--> (2,1) ; (2,0) <--> (1,0) ; (0,3) <--> (1,3) ; (0,0) <--> (1,0) ; (0,1) <--> (1,1) ; (2,3) <--> (3,3) ; (2,2) <--> (1,2) ; (1,2) <--> (1,3) ; (3,0) <--> (2,0) ; (3,0) <--> (3,1) ; (0,2) <--> (0,3) ; (1,1) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (2,0) ; (3,1) <--> (3,0) ; (0,3) <--> (1,3) ; (0,1) <--> (0,0) ; (1,2) <--> (0,2) ; (1,3) <--> (2,3) ; (3,0) <--> (2,0) ; (1,1) <--> (2,1) ; (3,3) <--> (2,3) ; (1,2) <--> (2,2) ; (0,1) <--> (0,2) ; (0,3) <--> (0,2) ; (3,2) <--> (3,1) ; (1,0) <--> (1,1) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (0,0) ; (2,0) <--> (2,1) ; (0,1) <--> (0,2) ; (3,3) <--> (2,3) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (3,1) <--> (3,0) ; (1,0) <--> (1,1) ; (2,1) <--> (2,2) ; (3,0) <--> (2,0) ; (0,1) <--> (0,0) ; (1,3) <--> (1,2) ; (0,2) <--> (0,3) ; (2,1) <--> (1,1) ; (3,2) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,0) <--> (3,1) ; (1,2) <--> (1,3) ; (0,1) <--> (0,2) ; (2,0) <--> (3,0) ; (1,1) <--> (1,2) ; (2,2) <--> (2,3) ; (0,2) <--> (0,3) ; (2,3) <--> (3,3) ; (2,0) <--> (1,0) ; (1,0) <--> (0,0) ; (1,3) <--> (0,3) ; (3,2) <--> (2,2) ; (1,1) <--> (2,1) ; (0,1) <--> (0,0) ; (3,1) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (1,1) ; (3,0) <--> (2,0) ; (0,2) <--> (1,2) ; (1,3) <--> (2,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,0) ; (1,1) <--> (0,1) ; (1,0) <--> (0,0) ; (0,1) <--> (0,2) ; (1,2) <--> (1,3) ; (2,3) <--> (3,3) ; (0,2) <--> (0,3) ; (1,2) <--> (2,2) ; (3,1) <--> (3,2) ; (3,3) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,1) <--> (0,0) ; (2,2) <--> (2,3) ; (1,2) <--> (0,2) ; (2,2) <--> (3,2) ; (3,0) <--> (3,1) ; (0,2) <--> (0,1) ; (3,1) <--> (3,2) ; (0,2) <--> (0,3) ; (2,1) <--> (3,1) ; (1,3) <--> (1,2) ; (1,0) <--> (2,0) ; (1,1) <--> (1,0) ; (1,1) <--> (2,1) ; (2,3) <--> (1,3) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (1,1) ; (3,1) <--> (3,0) ; (1,0) <--> (2,0) ; (2,3) <--> (1,3) ; (0,2) <--> (0,1) ; (3,3) <--> (3,2) ; (0,1) <--> (0,0) ; (0,0) <--> (1,0) ; (0,2) <--> (0,3) ; (2,3) <--> (2,2) ; (3,2) <--> (3,1) ; (1,2) <--> (1,1) ; (1,2) <--> (1,3) ; (3,1) <--> (2,1) ; (2,0) <--> (3,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (2,0) ; (3,3) <--> (3,2) ; (1,1) <--> (2,1) ; (1,1) <--> (0,1) ; (1,0) <--> (0,0) ; (2,3) <--> (1,3) ; (0,2) <--> (0,3) ; (1,3) <--> (0,3) ; (0,0) <--> (0,1) ; (2,2) <--> (2,1) ; (3,2) <--> (3,1) ; (2,2) <--> (1,2) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (3,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (3,1) ; (0,2) <--> (0,3) ; (0,1) <--> (0,0) ; (2,0) <--> (3,0) ; (3,2) <--> (2,2) ; (3,3) <--> (3,2) ; (2,3) <--> (2,2) ; (1,0) <--> (1,1) ; (1,3) <--> (2,3) ; (1,0) <--> (2,0) ; (0,0) <--> (1,0) ; (1,1) <--> (2,1) ; (0,2) <--> (1,2) ; (0,3) <--> (1,3) ; (3,1) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,2) <--> (3,1) ; (2,0) <--> (1,0) ; (1,2) <--> (1,1) ; (2,2) <--> (2,3) ; (0,1) <--> (0,0) ; (1,3) <--> (2,3) ; (3,2) <--> (3,3) ; (1,0) <--> (0,0) ; (0,3) <--> (0,2) ; (2,0) <--> (2,1) ; (1,1) <--> (0,1) ; (0,2) <--> (1,2) ; (3,0) <--> (3,1) ; (2,2) <--> (3,2) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,2) (0,2) (0,3) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,2) <--> (1,2) ; (2,3) <--> (3,3) ; (0,0) <--> (1,0) ; (2,1) <--> (2,2) ; (2,3) <--> (2,2) ; (2,0) <--> (2,1) ; (1,2) <--> (1,1) ; (0,1) <--> (1,1) ; (0,1) <--> (0,0) ; (3,3) <--> (3,2) ; (3,2) <--> (3,1) ; (2,0) <--> (1,0) ; (1,3) <--> (0,3) ; (3,0) <--> (3,1) ; (1,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,1) <--> (3,0) ; (0,2) <--> (0,1) ; (1,3) <--> (1,2) ; (2,1) <--> (1,1) ; (3,2) <--> (3,3) ; (3,0) <--> (2,0) ; (0,1) <--> (0,0) ; (0,1) <--> (1,1) ; (1,3) <--> (2,3) ; (0,2) <--> (1,2) ; (2,1) <--> (3,1) ; (1,0) <--> (0,0) ; (2,2) <--> (2,3) ; (2,2) <--> (3,2) ; (1,3) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,0) <--> (1,0) ; (3,1) <--> (3,0) ; (2,1) <--> (2,0) ; (2,3) <--> (1,3) ; (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (2,2) ; (1,1) <--> (0,1) ; (0,3) <--> (0,2) ; (3,2) <--> (3,3) ; (3,2) <--> (3,1) ; (0,0) <--> (1,0) ; (0,3) <--> (1,3) ; (1,2) <--> (0,2) ; (3,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,1) <--> (0,0) ; (2,3) <--> (1,3) ; (3,0) <--> (3,1) ; (2,1) <--> (2,2) ; (1,0) <--> (1,1) ; (0,3) <--> (0,2) ; (0,2) <--> (1,2) ; (3,1) <--> (3,2) ; (0,1) <--> (1,1) ; (1,3) <--> (1,2) ; (3,2) <--> (2,2) ; (2,0) <--> (1,0) ; (2,0) <--> (2,1) ; (2,3) <--> (3,3) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,2) <--> (1,2) ; (0,0) <--> (0,1) ; (3,3) <--> (2,3) ; (0,1) <--> (0,2) ; (3,2) <--> (3,3) ; (1,3) <--> (1,2) ; (1,1) <--> (1,2) ; (2,0) <--> (1,0) ; (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (1,3) <--> (0,3) ; (1,0) <--> (0,0) ; (3,0) <--> (3,1) ; (2,0) <--> (3,0) ; (2,1) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,1) <--> (2,0) ; (3,0) <--> (3,1) ; (0,0) <--> (0,1) ; (2,2) <--> (3,2) ; (1,3) <--> (2,3) ; (0,3) <--> (1,3) ; (3,3) <--> (2,3) ; (1,2) <--> (0,2) ; (1,0) <--> (1,1) ; (1,2) <--> (1,3) ; (2,2) <--> (2,1) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (2,0) <--> (1,0) ; (0,2) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,2) <--> (1,2) ; (1,1) <--> (0,1) ; (2,0) <--> (2,1) ; (1,3) <--> (2,3) ; (3,2) <--> (2,2) ; (2,3) <--> (3,3) ; (3,2) <--> (3,1) ; (3,0) <--> (2,0) ; (0,3) <--> (1,3) ; (3,1) <--> (2,1) ; (0,1) <--> (0,2) ; (0,2) <--> (1,2) ; (1,0) <--> (1,1) ; (0,0) <--> (0,1) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,2) <--> (2,1) ; (1,3) <--> (2,3) ; (0,1) <--> (1,1) ; (0,3) <--> (0,2) ; (1,3) <--> (0,3) ; (0,0) <--> (1,0) ; (3,0) <--> (3,1) ; (0,2) <--> (1,2) ; (0,0) <--> (0,1) ; (1,2) <--> (1,1) ; (2,0) <--> (2,1) ; (3,2) <--> (3,1) ; (3,2) <--> (3,3) ; (1,0) <--> (2,0) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,2) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (2,1) ; (1,2) <--> (1,1) ; (0,2) <--> (0,3) ; (0,0) <--> (1,0) ; (1,2) <--> (1,3) ; (3,1) <--> (2,1) ; (2,0) <--> (1,0) ; (3,3) <--> (3,2) ; (2,3) <--> (3,3) ; (0,3) <--> (1,3) ; (3,0) <--> (2,0) ; (3,1) <--> (3,0) ; (0,1) <--> (0,0) ; (3,2) <--> (3,1) ; (2,2) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,2) <--> (3,3) ; (2,2) <--> (2,1) ; (2,3) <--> (3,3) ; (1,1) <--> (0,1) ; (1,0) <--> (1,1) ; (0,0) <--> (0,1) ; (1,2) <--> (1,3) ; (2,1) <--> (3,1) ; (0,3) <--> (0,2) ; (3,2) <--> (2,2) ; (3,0) <--> (3,1) ; (0,2) <--> (0,1) ; (1,3) <--> (2,3) ; (2,0) <--> (1,0) ; (2,0) <--> (3,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,3) <--> (2,2) ; (2,1) <--> (1,1) ; (2,0) <--> (3,0) ; (2,0) <--> (1,0) ; (2,3) <--> (3,3) ; (3,3) <--> (3,2) ; (0,2) <--> (0,3) ; (0,0) <--> (1,0) ; (1,3) <--> (0,3) ; (3,1) <--> (3,0) ; (0,1) <--> (0,2) ; (1,2) <--> (1,1) ; (2,2) <--> (2,1) ; (3,2) <--> (3,1) ; (0,1) <--> (0,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,2) <--> (3,1) ; (2,0) <--> (1,0) ; (0,0) <--> (0,1) ; (0,1) <--> (1,1) ; (2,3) <--> (1,3) ; (3,0) <--> (3,1) ; (3,0) <--> (2,0) ; (1,0) <--> (0,0) ; (2,1) <--> (2,2) ; (1,1) <--> (2,1) ; (1,3) <--> (1,2) ; (3,2) <--> (3,3) ; (3,3) <--> (2,3) ; (0,2) <--> (0,1) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (1,0) ; (3,1) <--> (3,2) ; (1,3) <--> (1,2) ; (0,1) <--> (0,0) ; (2,0) <--> (3,0) ; (1,3) <--> (2,3) ; (0,3) <--> (1,3) ; (3,2) <--> (3,3) ; (2,1) <--> (2,0) ; (0,1) <--> (0,2) ; (3,2) <--> (2,2) ; (2,1) <--> (1,1) ; (1,2) <--> (0,2) ; (3,0) <--> (3,1) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,2) <--> (2,1) ; (0,0) <--> (1,0) ; (3,0) <--> (2,0) ; (0,1) <--> (1,1) ; (3,2) <--> (3,1) ; (0,3) <--> (1,3) ; (3,1) <--> (3,0) ; (1,1) <--> (1,0) ; (0,2) <--> (0,1) ; (1,2) <--> (2,2) ; (3,3) <--> (3,2) ; (1,3) <--> (2,3) ; (0,2) <--> (0,3) ; (3,3) <--> (2,3) ; (2,1) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (2,1) ; (1,0) <--> (0,0) ; (1,3) <--> (1,2) ; (0,2) <--> (0,1) ; (0,3) <--> (1,3) ; (2,0) <--> (1,0) ; (2,3) <--> (2,2) ; (3,2) <--> (3,3) ; (3,1) <--> (2,1) ; (1,2) <--> (0,2) ; (2,0) <--> (3,0) ; (1,0) <--> (1,1) ; (3,1) <--> (3,2) ; (3,3) <--> (2,3) ; (0,0) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (2,3) ; (3,0) <--> (3,1) ; (1,1) <--> (1,0) ; (3,2) <--> (2,2) ; (1,2) <--> (0,2) ; (2,3) <--> (3,3) ; (2,1) <--> (1,1) ; (0,1) <--> (0,0) ; (0,3) <--> (1,3) ; (3,0) <--> (2,0) ; (0,2) <--> (0,1) ; (3,1) <--> (3,2) ; (0,0) <--> (1,0) ; (1,2) <--> (1,3) ; (2,0) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (3,3) <--> (3,2) ; (2,2) <--> (2,1) ; (1,3) <--> (2,3) ; (0,3) <--> (0,2) ; (3,0) <--> (2,0) ; (0,2) <--> (0,1) ; (0,1) <--> (0,0) ; (1,3) <--> (0,3) ; (1,0) <--> (1,1) ; (2,2) <--> (1,2) ; (0,1) <--> (1,1) ; (3,3) <--> (2,3) ; (2,2) <--> (3,2) ; (3,0) <--> (3,1) ; (2,0) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,0) <--> (1,0) ; (3,0) <--> (2,0) ; (1,2) <--> (1,3) ; (1,2) <--> (0,2) ; (1,3) <--> (2,3) ; (1,1) <--> (2,1) ; (3,1) <--> (2,1) ; (0,3) <--> (1,3) ; (0,1) <--> (0,2) ; (2,0) <--> (2,1) ; (3,2) <--> (2,2) ; (0,1) <--> (0,0) ; (3,2) <--> (3,1) ; (3,2) <--> (3,3) ; (2,3) <--> (2,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (1,2) (1,3) (2,3) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (1,1) ; (1,1) <--> (0,1) ; (3,2) <--> (3,1) ; (0,3) <--> (1,3) ; (2,2) <--> (1,2) ; (2,1) <--> (1,1) ; (1,3) <--> (2,3) ; (3,0) <--> (2,0) ; (0,1) <--> (0,0) ; (1,0) <--> (2,0) ; (0,2) <--> (0,3) ; (3,3) <--> (3,2) ; (3,1) <--> (3,0) ; (1,2) <--> (0,2) ; (3,3) <--> (2,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,1) <--> (0,0) ; (2,1) <--> (2,2) ; (2,3) <--> (1,3) ; (3,3) <--> (3,2) ; (3,2) <--> (3,1) ; (1,2) <--> (2,2) ; (0,1) <--> (0,2) ; (2,0) <--> (2,1) ; (1,1) <--> (1,0) ; (2,0) <--> (3,0) ; (3,0) <--> (3,1) ; (0,3) <--> (0,2) ; (1,1) <--> (1,2) ; (3,3) <--> (2,3) ; (0,3) <--> (1,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,1) <--> (1,1) ; (1,3) <--> (1,2) ; (2,3) <--> (1,3) ; (3,1) <--> (3,0) ; (0,1) <--> (0,2) ; (0,0) <--> (1,0) ; (3,3) <--> (3,2) ; (2,1) <--> (2,0) ; (3,1) <--> (3,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (0,1) <--> (0,0) ; (2,3) <--> (2,2) ; (0,3) <--> (0,2) ; (1,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (2,3) ; (3,3) <--> (3,2) ; (0,0) <--> (0,1) ; (3,1) <--> (3,0) ; (1,1) <--> (1,2) ; (2,3) <--> (3,3) ; (0,0) <--> (1,0) ; (2,1) <--> (2,0) ; (2,1) <--> (2,2) ; (1,0) <--> (1,1) ; (1,2) <--> (1,3) ; (3,0) <--> (2,0) ; (1,3) <--> (0,3) ; (3,2) <--> (2,2) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (1,2) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,2) <--> (1,3) ; (1,0) <--> (2,0) ; (2,2) <--> (3,2) ; (2,3) <--> (2,2) ; (3,1) <--> (3,0) ; (0,0) <--> (1,0) ; (1,1) <--> (1,2) ; (0,2) <--> (0,3) ; (2,0) <--> (3,0) ; (2,3) <--> (3,3) ; (1,1) <--> (2,1) ; (3,1) <--> (3,2) ; (1,3) <--> (0,3) ; (0,2) <--> (0,1) ; (0,0) <--> (0,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,0) <--> (1,0) ; (2,3) <--> (1,3) ; (2,3) <--> (2,2) ; (0,1) <--> (0,2) ; (2,0) <--> (3,0) ; (2,0) <--> (1,0) ; (3,1) <--> (3,2) ; (0,1) <--> (1,1) ; (0,3) <--> (1,3) ; (3,2) <--> (3,3) ; (2,1) <--> (2,0) ; (3,2) <--> (2,2) ; (0,2) <--> (0,3) ; (3,1) <--> (2,1) ; (1,2) <--> (1,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,3) <--> (1,3) ; (3,2) <--> (3,3) ; (2,2) <--> (2,1) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (2,1) <--> (1,1) ; (3,1) <--> (3,2) ; (0,1) <--> (0,0) ; (3,0) <--> (2,0) ; (3,3) <--> (2,3) ; (1,3) <--> (2,3) ; (1,1) <--> (0,1) ; (3,0) <--> (3,1) ; (0,2) <--> (1,2) ; (1,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (2,1) ; (2,2) <--> (3,2) ; (1,1) <--> (0,1) ; (1,2) <--> (1,3) ; (0,2) <--> (0,3) ; (2,3) <--> (1,3) ; (0,1) <--> (0,0) ; (2,3) <--> (3,3) ; (0,3) <--> (1,3) ; (3,0) <--> (2,0) ; (3,1) <--> (3,2) ; (3,1) <--> (3,0) ; (0,1) <--> (0,2) ; (1,0) <--> (0,0) ; (2,0) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,0) <--> (0,0) ; (2,3) <--> (1,3) ; (2,0) <--> (3,0) ; (0,1) <--> (1,1) ; (0,3) <--> (1,3) ; (3,2) <--> (3,3) ; (2,2) <--> (3,2) ; (1,0) <--> (2,0) ; (1,2) <--> (0,2) ; (3,3) <--> (2,3) ; (3,1) <--> (3,0) ; (2,1) <--> (2,0) ; (2,2) <--> (2,1) ; (0,0) <--> (0,1) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (2,1) (2,2) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,1) <--> (2,1) ; (2,2) <--> (2,3) ; (2,3) <--> (3,3) ; (0,2) <--> (0,1) ; (3,0) <--> (2,0) ; (3,1) <--> (3,0) ; (0,3) <--> (0,2) ; (0,1) <--> (1,1) ; (0,1) <--> (0,0) ; (1,2) <--> (1,3) ; (0,0) <--> (1,0) ; (3,1) <--> (3,2) ; (0,3) <--> (1,3) ; (2,1) <--> (2,2) ; (3,2) <--> (3,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (2,1) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,1) <--> (0,2) ; (1,0) <--> (0,0) ; (1,0) <--> (1,1) ; (3,2) <--> (3,3) ; (0,1) <--> (0,0) ; (2,1) <--> (1,1) ; (0,3) <--> (1,3) ; (3,0) <--> (2,0) ; (3,3) <--> (2,3) ; (3,1) <--> (2,1) ; (1,2) <--> (1,3) ; (3,1) <--> (3,0) ; (2,2) <--> (1,2) ; (2,3) <--> (2,2) ; (0,2) <--> (0,3) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (0,2) (0,3) (1,3) (1,2) (2,2) (2,3) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (2,0) <--> (2,1) ; (0,1) <--> (1,1) ; (1,2) <--> (1,3) ; (0,2) <--> (0,3) ; (2,0) <--> (1,0) ; (1,2) <--> (2,2) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (3,0) <--> (3,1) ; (1,1) <--> (2,1) ; (3,3) <--> (2,3) ; (0,2) <--> (1,2) ; (2,3) <--> (1,3) ; (3,2) <--> (3,1) ; (0,0) <--> (1,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (0,3) <--> (1,3) ; (3,3) <--> (2,3) ; (2,0) <--> (3,0) ; (3,1) <--> (3,0) ; (3,3) <--> (3,2) ; (2,1) <--> (2,0) ; (0,2) <--> (1,2) ; (2,3) <--> (1,3) ; (0,1) <--> (0,0) ; (0,0) <--> (1,0) ; (1,2) <--> (2,2) ; (1,1) <--> (1,0) ; (2,2) <--> (3,2) ; (3,2) <--> (3,1) ; (1,1) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (1,0) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
 <ADJLIST_START> (1,3) <--> (2,3) ; (2,1) <--> (2,0) ; (3,1) <--> (3,0) ; (3,3) <--> (2,3) ; (2,2) <--> (1,2) ; (2,2) <--> (3,2) ; (0,1) <--> (0,0) ; (3,0) <--> (2,0) ; (3,2) <--> (3,3) ; (0,2) <--> (1,2) ; (1,3) <--> (0,3) ; (1,1) <--> (2,1) ; (0,1) <--> (1,1) ; (1,0) <--> (0,0) ; (3,1) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END> 
Solution:
 <PATH_START> (0,0) (0,1) (1,1) (2,1) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END> 

Maze:
""" + tokens + "\nSolution:\n"


class TokenFewShotPrompt(TokenNoCodePrompt):
    kind = "token-few-shot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (2,1) <--> (1,1) ; (0,2) <--> (0,3) ; (3,2) <--> (3,3) ; (2,3) <--> (3,3) ; (1,3) <--> (1,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (3,2) <--> (2,2) ; (2,1) <--> (3,1) ; (1,3) <--> (0,3) ; (2,0) <--> (1,0) ; (1,0) <--> (0,0) ; (0,0) <--> (0,1) ; (0,2) <--> (0,1) ; (3,0) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END>

Maze:
<ADJLIST_START> (2,3) <--> (2,2) ; (1,0) <--> (0,0) ; (3,1) <--> (3,2) ; (0,0) <--> (0,1) ; (2,1) <--> (3,1) ; (3,1) <--> (3,0) ; (2,0) <--> (3,0) ; (0,2) <--> (0,1) ; (3,3) <--> (3,2) ; (0,3) <--> (0,2) ; (1,2) <--> (1,1) ; (2,1) <--> (1,1) ; (0,3) <--> (1,3) ; (1,3) <--> (2,3) ; (1,0) <--> (2,0) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (3,2) (3,3) <PATH_END>

Maze:
<ADJLIST_START> (1,1) <--> (1,0) ; (3,1) <--> (3,2) ; (2,0) <--> (3,0) ; (1,2) <--> (1,1) ; (0,0) <--> (1,0) ; (2,3) <--> (3,3) ; (0,3) <--> (1,3) ; (2,2) <--> (2,3) ; (0,0) <--> (0,1) ; (3,1) <--> (2,1) ; (2,2) <--> (1,2) ; (0,3) <--> (0,2) ; (2,3) <--> (1,3) ; (3,3) <--> (3,2) ; (2,0) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END>

Maze:
""" + tokens + "\nSolution:\n"


class TokenOneShotCoTPrompt(TokenNoCodePrompt):
    kind = "token-one-shot-cot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (2,1) <--> (1,1) ; (0,2) <--> (0,3) ; (3,2) <--> (3,3) ; (2,3) <--> (3,3) ; (1,3) <--> (1,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (3,2) <--> (2,2) ; (2,1) <--> (3,1) ; (1,3) <--> (0,3) ; (2,0) <--> (1,0) ; (1,0) <--> (0,0) ; (0,0) <--> (0,1) ; (0,2) <--> (0,1) ; (3,0) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
1) Move down from (0,0) to (1,0)
2) Move down from (1,0) to (2,0)
3) Move down from (2,0) to (3,0)
4) Move right from (3,0) to (3,1)
5) Move up from (3,1) to (2,1)
6) Move right from (2,1) to (2,2)
7) Move down from (2,2) to (3,2)
8) Move right from (3,2) to (3,3)
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END>

Maze:\n
""" + tokens + "\nSolution:\n"

class TokenFewShotCoTPrompt(TokenNoCodePrompt):
    kind = "token-few-shot-cot"

    def get_prompt(self, tokens: str = ""):
        return """
Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (2,1) <--> (1,1) ; (0,2) <--> (0,3) ; (3,2) <--> (3,3) ; (2,3) <--> (3,3) ; (1,3) <--> (1,2) ; (2,1) <--> (2,2) ; (2,0) <--> (3,0) ; (3,2) <--> (2,2) ; (2,1) <--> (3,1) ; (1,3) <--> (0,3) ; (2,0) <--> (1,0) ; (1,0) <--> (0,0) ; (0,0) <--> (0,1) ; (0,2) <--> (0,1) ; (3,0) <--> (3,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
1) Move down from (0,0) to (1,0)
2) Move down from (1,0) to (2,0)
3) Move down from (2,0) to (3,0)
4) Move right from (3,0) to (3,1)
5) Move up from (3,1) to (2,1)
6) Move right from (2,1) to (2,2)
7) Move down from (2,2) to (3,2)
8) Move right from (3,2) to (3,3)
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END>

Maze:
<ADJLIST_START> (1,1) <--> (1,0) ; (3,1) <--> (3,2) ; (2,0) <--> (3,0) ; (1,2) <--> (1,1) ; (0,0) <--> (1,0) ; (2,3) <--> (3,3) ; (0,3) <--> (1,3) ; (2,2) <--> (2,3) ; (0,0) <--> (0,1) ; (3,1) <--> (2,1) ; (2,2) <--> (1,2) ; (0,3) <--> (0,2) ; (2,3) <--> (1,3) ; (3,3) <--> (3,2) ; (2,0) <--> (2,1) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
1) Move right from (0,0) to (0,1)
2) (1,0) is a dead end, so we need to backtrack to (0,0)
3) Move down from (0,0) to (1,0)
4) Below is a wall, so move to the right from (1,0) to (1,1)
5) Continue moving to the right from (1,1) to (1,2)
6) There is a wall to the right, so move down from (1,2) to (2,2)
7) There is no path down between (2,2) and (3,2), so move to the right from (2,2) to (2,3)
8) Move down to the exit from (2,3) to (3,3)
Final solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END>

Maze:
<ADJLIST_START> (2,2) <--> (2,1) ; (3,0) <--> (2,0) ; (1,3) <--> (2,3) ; (0,2) <--> (0,1) ; (3,3) <--> (3,2) ; (3,1) <--> (2,1) ; (1,3) <--> (1,2) ; (3,3) <--> (2,3) ; (2,0) <--> (2,1) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (0,1) <--> (0,0) ; (1,0) <--> (2,0) ; (1,2) <--> (1,1) ; (3,1) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
Considering all available ajacencies:
1) Move right from (0,0) to (0,1) via (0,1) <--> (0,0)
2) Move right from (0,1) to (0,2) via (0,2) <--> (0,1)
3) Move right from (0,2) to (0,3) via (0,2) <--> (0,3)
4) There is no direct pass down from (0,3) to (1,3), so we need to backtrack to (0,2)
5) There are no another paths in (0,2) so we need to backtrack to (0,1)
6) There are no another paths in (0,1) so we need to backtrack to (0,0)
7) Move down from (0,0) to (1,0) via (1,0) <--> (0,0)
8) Move down from (1,0) to (2,0) via (1,0) <--> (2,0)
9) Move down from (2,0) to (3,0) via (3,0) <--> (2,0) 
10) There is no direct path right from (3,0) to (3,1), so we need to backtrack to (2,0)
11) Move right from (2,0) to (2,1) via (2,0) <--> (2,1) 
12) Move right from (2,1) to (2,2) via (2,2) <--> (2,1)
13) There is no direct path right from (2,2) to (2,3), so we need to backtrack to (2,1)
14) Move down from (2,1) to (3,1) via (3,1) <--> (2,1)
15) Move right from (3,1) to (3,2) via (3,1) <--> (3,2)
16) Move right from (3,2) to (3,3) via (3,3) <--> (3,2)
Final solution:
<PATH_START> (0,0) (1,0) (1,1) (1,2) (2,2) (2,3) (3,3) <PATH_END>

Maze:
""" + tokens + "\nSolution:\n"



class TokenReasoningNoCodePrompt(TokenDefaultPrompt):
    kind = "token-reason-no-code"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Provide reasoning but do not output code\n"

class TokenReasoningButNoCodePrompt(TokenDefaultPrompt):
    kind = "token-reason-but-no-code"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Do not output code.\nDo not simply output algorithm, but give reasoning as to why and in the end give specific solution for a specific maze in the required format.\n"

class TokenCustomPrompt(TokenDefaultPrompt):
    kind = "token-custom"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Do not output code.\nProvide reasoning behind your calculations. In the end check if your solution does not cross any walls and path uses only adjacent cells\n"

class TokenCustom2Prompt(TokenDefaultPrompt):
    kind = "token-custom2"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + """

Question:
Here is a maze represented as a adjacency list for graph of tokens starting and ending with <ADJLIST_START> and <ADJLIST_END>.\n
Entry and exit points are marked with <ORIGIN_START/END> and <TARGET_START/END> tokens respectively.\n
Please find a solution for this maze and output it in the format of coordinate list between <PATH_START> and <PATH_END> tokens as well, where first coordinate is row and second coordinate is column\n 

Maze:
<ADJLIST_START> (2,2) <--> (2,1) ; (3,0) <--> (2,0) ; (1,3) <--> (2,3) ; (0,2) <--> (0,1) ; (3,3) <--> (3,2) ; (3,1) <--> (2,1) ; (1,3) <--> (1,2) ; (3,3) <--> (2,3) ; (2,0) <--> (2,1) ; (0,2) <--> (0,3) ; (1,0) <--> (0,0) ; (0,1) <--> (0,0) ; (1,0) <--> (2,0) ; (1,2) <--> (1,1) ; (3,1) <--> (3,2) ; <ADJLIST_END> <ORIGIN_START> (0,0) <ORIGIN_END> <TARGET_START> (3,3) <TARGET_END>

Solution:
Starting with the origin at (0,0), we explore reachable nodes step-by-step, marking nodes as visited to avoid cycles, while tracing our path to the destination. Given that BFS offers the shortest path in an unweighted graph like this one, using BFS can be particularly effective.

Following the provided adjacency list and implementing BFS, we examine and queue each neighbor of the current node until we reach the target node at (3,3).
1) Move down from (0,0) to (1,0)
2) Move down from (1,0) to (2,0)
3) Move down from (2,0) to (3,0)
4) Move right from (3,0) to (3,1)
5) Move up from (3,1) to (2,1)
6) Move right from (2,1) to (2,2)
7) Move down from (2,2) to (3,2)
8) Move right from (3,2) to (3,3)

Upon backtracking from the end point (3,3) by following predecessors, the calculated shortest path in your maze, considering the graph structure and node connections provided, is as follows:
<PATH_START> (0,0) (1,0) (2,0) (3,0) (3,1) (2,1) (2,2) (3,2) (3,3) <PATH_END>

Maze:\n
""" + tokens + "\nSolution:\n"

class ImageDefaultPrompt(DefaultPrompt):
    kind = "image-default"
    dir_name = "images"

    def get_prompt(self, tokens: str):
        return f"""
Here is an image of a maze with coordinates of cells on sides.\n It's entry point is at (0,0) and exit point is at (3,3). Walls are marked as thick black lines.\n
                """ + self.default_query
    
class ImageZeroShotPrompt(ImageDefaultPrompt):
    kind = "image-zero-shot"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Let's think step by step.\n"
    
class ASCIIDefaultPrompt(DefaultPrompt):
    kind = "ascii-default"
    dir_name = "ascii"

    def get_prompt(self, tokens: str):
        return f"""
Here is an ASCII representation of a maze\n
{tokens}\n
It's entry point is at coordinate (1,1) (Letter S) and exit point is at (7,7) (Letter E).\n
Walls are marked with hash signs.\n
""" + self.default_query
    
class ASCIIZeroShotPrompt(ASCIIDefaultPrompt):
    kind = "ascii-zero-shot"

    def get_prompt(self, tokens: str = ""):
        return super().get_prompt(tokens) + "Let's think step by step.\n"
    